//  Copyright 2024 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import database as db
import types
import utils

use cemitter
use ctypegen
use escapestring
use int2cstring
use sym

enum CStatementType {
   Assignment
   Break
   Call
   Continue
   Do
   Enum
   Expr
   For
   Funcall
   Fundef
   Goto
   If
   Else
   ElseIf
   Include
   Return
   StaticAssert
   Struct
   Switch
   Typedef
   Union
   While
   Vardef
}

// Types ----------------------------------------------------------------------
class CPrimitiveType(self, ty: Type) {

  enum Type {
    Void
    Char
    Int
    Short
    Long
    LongLong
    Int8
    Uint8
    Int16
    Uint16
    Int32
    Uint32
    Int64
    Uint64
    Float
    Double
    LongDouble
  }

  self.type = ty

  func width(self) -> u32 {
    switch self.type {
      CPrimitiveType.Type.Void => return 0u32
      CPrimitiveType.Type.Char => return 8u32
      CPrimitiveType.Type.Int => return 32u32
      CPrimitiveType.Type.Short => return 16u32
      CPrimitiveType.Type.Long => return 32u32
      CPrimitiveType.Type.LongLong => return 64u32
      CPrimitiveType.Type.Float => return 32u32
      CPrimitiveType.Type.Double => return 64u32
      CPrimitiveType.Type.LongDouble => return 80u32
      CPrimitiveType.Type.Int8 => return 8u32
      CPrimitiveType.Type.Uint8 => return 8u32
      CPrimitiveType.Type.Int16 => return 16u32
      CPrimitiveType.Type.Uint16 => return 16u32
      CPrimitiveType.Type.Int32 => return 32u32
      CPrimitiveType.Type.Uint32 => return 32u32
      CPrimitiveType.Type.Int64 => return 64u32
      CPrimitiveType.Type.Uint64 => return 64u32
    }
  }

  func isSigned(self) -> bool {
    switch self.type {
      CPrimitiveType.Type.Void => return false
      CPrimitiveType.Type.Char => return true // though this is platform dependent
      CPrimitiveType.Type.Int => return true
      CPrimitiveType.Type.Short => return true
      CPrimitiveType.Type.Long => return true
      CPrimitiveType.Type.LongLong => return true
      CPrimitiveType.Type.Float => return true
      CPrimitiveType.Type.Double => return true
      CPrimitiveType.Type.LongDouble => return true
      CPrimitiveType.Type.Int8 => return true
      CPrimitiveType.Type.Uint8 => return false
      CPrimitiveType.Type.Int16 => return true
      CPrimitiveType.Type.Uint16 => return false
      CPrimitiveType.Type.Int32 => return true
      CPrimitiveType.Type.Uint32 => return false
      CPrimitiveType.Type.Int64 => return true
      CPrimitiveType.Type.Uint64 => return false
    }
  }

  func toString(self) -> string {
    // This is mainly used to generate function names (a sort of compile-time
    // dispatch) for function calls like 'tostring_<type>_t(<expression>'
    switch self.type {
      CPrimitiveType.Type.Void => return "void"
      CPrimitiveType.Type.Char => return "char"
      CPrimitiveType.Type.Int => return "int"
      CPrimitiveType.Type.Short => return "short"
      CPrimitiveType.Type.Long => return "long"
      CPrimitiveType.Type.LongLong => return "longlong"
      CPrimitiveType.Type.Float => return "float"
      CPrimitiveType.Type.Double => return "double"
      CPrimitiveType.Type.LongDouble => return "longdouble"
      CPrimitiveType.Type.Int8 => return "int8"
      CPrimitiveType.Type.Uint8 => return "uint8"
      CPrimitiveType.Type.Int16 => return "int16"
      CPrimitiveType.Type.Uint16 => return "uint16"
      CPrimitiveType.Type.Int32 => return "int32"
      CPrimitiveType.Type.Uint32 => return "uint32"
      CPrimitiveType.Type.Int64 => return "int64"
      CPrimitiveType.Type.Uint64 => return "uint64"
    }
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CPrimitiveType.Type.Void => e.write("void")
      CPrimitiveType.Type.Char => e.write("char")
      CPrimitiveType.Type.Int => e.write("int")
      CPrimitiveType.Type.Short => e.write("short")
      CPrimitiveType.Type.Long => e.write("long")
      CPrimitiveType.Type.LongLong => e.write("long long")
      CPrimitiveType.Type.Float => {
        e.needFloatType()
        e.write("float_t")
      }
      CPrimitiveType.Type.Double => {
        e.needDoubleType()
        e.write("double_t")
      }
      CPrimitiveType.Type.LongDouble => e.write("long double")

      CPrimitiveType.Type.Int8 => {
        e.include("<inttypes.h>")
        e.write("int8_t")
      }
      CPrimitiveType.Type.Uint8 => {
        e.include("<inttypes.h>")
        e.write("uint8_t")
      }
      CPrimitiveType.Type.Int16 => {
        e.include("<inttypes.h>")
        e.write("int16_t")
      }
      CPrimitiveType.Type.Uint16 => {
        e.include("<inttypes.h>")
        e.write("uint16_t")
      }
      CPrimitiveType.Type.Int32 => {
        e.include("<inttypes.h>")
        e.write("int32_t")
      }
      CPrimitiveType.Type.Uint32 => {
        e.include("<inttypes.h>")
        e.write("uint32_t")
      }
      CPrimitiveType.Type.Int64 => {
        e.include("<inttypes.h>")
        e.write("int64_t")
      }
      CPrimitiveType.Type.Uint64 => {
        e.include("<inttypes.h>")
        e.write("uint64_t")
      }
    }
  }
}


relation OneToOne CPointerType CTypeExpr cascade

class CPointerType(self, type: CTypeExpr) {

   self.insertCTypeExpr(type)

   func emit(self, e: CEmitter) {
     // TODO
   }
}


class CArrayType(self, elementType: CTypeExpr) {
  self.elementType = elementType
  self.name = "%s_array" % self.elementType.toString()

  func toString(self) -> string {
    return self.name
  }

  func emit(self, e: CEmitter) {
    e.write("%s_t" % self.name)
  }
}


class CDefinedType(self, name: string) {
  self.name = name

  func toString(self) -> string {
    return self.name
  }

  func emit(self, e: CEmitter) {
    if self.name == "bool_t" {
      e.needBoolType()
    }
    if self.name == "string_t" {
      e.needStringType()
    }
    e.write("%s_t" % self.name)
  }
}


relation OneToOne CTypeExpr CPrimitiveType cascade
relation OneToOne CTypeExpr CPointerType cascade
relation OneToOne CTypeExpr CDefinedType cascade
relation OneToOne CTypeExpr CArrayType cascade


class CTypeExpr(self, type: CPrimitiveType | CPointerType | CArrayType | CDefinedType) {

  enum Type {
    Primitive
    Pointer
    Array
    Defined
  }

  typeswitch type {
    CPrimitiveType => {
      self.type = Type.Primitive
      self.insertCPrimitiveType(type)
    }
    CPointerType => {
      self.type = Type.Pointer
      self.insertCPointerType(type)
    }
    CArrayType => {
      self.type = Type.Array
      self.insertCArrayType(type)
    }
    CDefinedType => {
      self.type = Type.Defined
      self.insertCDefinedType(type)
    }
  }

  func width(self) -> u32 {
    switch self.type {
      CTypeExpr.Type.Primitive => return self.cPrimitiveType.width()
      CTypeExpr.Type.Defined => return 0u32
      CTypeExpr.Type.Array => return 0u32
      default => raise Status.Unimplemented, "Width not defined for this type"
    }
  }

  func isSigned(self) -> bool {
    switch self.type {
      CTypeExpr.Type.Primitive => return self.cPrimitiveType.isSigned()
      CTypeExpr.Type.Defined => return false
      CTypeExpr.Type.Array => return false
      default => raise Status.Unimplemented, "isSigned not defined for this type"
    }
  }

  func toString(self) -> string {
    switch self.type {
      CTypeExpr.Type.Primitive => return self.cPrimitiveType.toString()
      CTypeExpr.Type.Defined => return self.cDefinedType.toString()
      CTypeExpr.Type.Array => return self.cArrayType.toString()
    }
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CTypeExpr.Type.Primitive => self.cPrimitiveType.emit(e)
      CTypeExpr.Type.Defined => self.cDefinedType.emit(e)
      CTypeExpr.Type.Array => self.cArrayType.emit(e)
    }
  }
}


// Expressions ----------------------------------------------------------------

class CLiteral(self, value: string | bool | db.Bigint | f64, printf: bool) {

  enum Type {
    PrintfString
    String
    Bool
    Int
    Uint
    Float
  }

  self.boolValue = null(bool)
  self.stringValue = null(string)
  self.intValue = null(db.Bigint)
  self.floatValue = null(f64)

  typeswitch value {
    bool => {
      self.type = Type.Bool
      self.boolValue = value
    }
    string => {
      self.type = printf ? Type.PrintfString : Type.String
      self.stringValue = value
    }
    Float => {
      self.type = Type.Float
      self.floatValue = value
    }
    db.Bigint => {
      self.type = Type.Int
      self.intValue = value
    }
  }

  func isSigned(self) -> bool {
    switch self.type {
      CLiteral.Type.Int => return self.intValue.isSigned
      default => return true
    }
  }

  func width(self) -> u32 {
    switch self.type {
      CLiteral.Type.Int => return self.intValue.width
      CLiteral.Type.Bool => return 1u32
      default => return 0u32
    }
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CLiteral.Type.PrintfString => {
        e.write("\"" + escapeString(e, self.stringValue, true) + "\"")
      }
      CLiteral.Type.String => {
        e.write("\"%s\"" % escapeString(e, self.stringValue, false))
      }
      CLiteral.Type.Bool => {
        if e.printfArg {
          e.include("<stdbool.h>")
        }
        if self.boolValue {
          e.write("true")
        } else {
          e.write("false")
        }
      }
      CLiteral.Type.Int => {
        e.write(int2cstring(self.intValue))
      }
      CLiteral.Type.Float => {
        e.write(utils.float2string(self.floatValue))
      }
      default => raise Status.Unimplemented, "CLiteral type not yet supported"
    }
  }
}


class CIdentifier(self, symbol: Sym, type: CTypeExpr?, firstInstance: bool, bindingInstance: bool,
                  isLocal: bool) {
  self.symbol = symbol
  self.type = type
  self.firstInstance = firstInstance
  self.bindingInstance = bindingInstance
  self.isLocal = isLocal

  func hash(self) -> u64 {
    return hashValue(self.symbol.name)
  }

  func equals(self, other: CIdentifier) -> bool {
    return self.symbol.name == other.symbol.name
  }

  func width(self) -> u32 {
    if isnull(self.type) {
      ty = self.symbol.typedValue
      if isnull(ty) {
        return 0u32
      }
      return ty.width()
    } else {
      return self.type.width()
    }
  }

  func isSigned(self) -> bool {
    if isnull(self.type) {
      return false
    } else {
      return self.type.isSigned()
    }
  }

  func emit(self, e: CEmitter) {
    e.write(self.symbol.name)
  }

  func emitDeclaration(self, e: CEmitter) {
    if isnull(self.type) {
      e.writeln("<todo>")
    } else {
      self.type.emit(e)
    }
    e.space()
    e.writeln("%s;" % self.symbol.name)
  }
}


relation OneToOne CPrefixOperator CExpr cascade

class CPrefixOperator(self, location: db.Location, type: CPrefixOperator.Type,
                      args: CExpr) {
  enum Type {
    AddressOf
    BitNot
    Dereference
    LogNot
    UnaryMinus
  }

  self.type = type
  self.insertCExpr(args)

  // C operator precedence taken from https://en.cppreference.com/w/c/language/operator_precedence
  func precedence(self) -> u8 {
    // All unary prefix operators have precedence value 2.
    return 2u8
  }

  func isSigned(self) -> bool {
    return self.cExpr.isSigned()
  }

  func width(self) -> u32 {
    return self.cExpr.width()
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CPrefixOperator.Type.AddressOf => e.write("&")
      CPrefixOperator.Type.BitNot => e.write("~")
      CPrefixOperator.Type.Dereference => e.write("*")
      CPrefixOperator.Type.LogNot => e.write("!")
      CPrefixOperator.Type.UnaryMinus => e.write("-")
    }

    if self.precedence() < self.cExpr.precedence() {
      e.write("(")
      self.cExpr.emit(e)
      e.write(")")
    } else {
      self.cExpr.emit(e)
    }
  }
}


relation OneToOne CBinaryOperator: "parent" CExpr: "left" cascade
relation OneToOne CBinaryOperator: "parent" CExpr: "right" cascade

class CBinaryOperator(self, location: db.Location, type: CBinaryOperator.Type,
                      ctype: CTypeExpr?, left: CExpr, right: CExpr) {
   enum Type {
     // arithmetic
     Plus
     Minus
     Times
     Divides
     Modulus

     // relational
     Equals
     NotEquals
     GreaterThan
     GreaterThanEqual
     LessThan
     LessThanEqual

     // logical
     LogAnd
     LogOr

     // bitwise
     BitAnd
     BitOr
     BitXor
     ShiftLeft
     ShiftRight

     // assignemnt
     Assign
  }

  self.type = type
  self.ctype = ctype
  self.insertLeftCExpr(left)
  self.insertRightCExpr(right)

  // C operator precedence taken from https://en.cppreference.com/w/c/language/operator_precedence
  func precedence(self) -> u8 {
    switch self.type {
      CBinaryOperator.Type.Plus => return 4u8
      CBinaryOperator.Type.Minus => return 4u8
      CBinaryOperator.Type.Times => return 3u8
      CBinaryOperator.Type.Divides => return 3u8
      CBinaryOperator.Type.Modulus => return 3u8
      CBinaryOperator.Type.Equals => return 7u8
      CBinaryOperator.Type.NotEquals => return 7u8
      CBinaryOperator.Type.GreaterThan => return 6u8
      CBinaryOperator.Type.GreaterThanEqual => return 6u8
      CBinaryOperator.Type.LessThan => return 6u8
      CBinaryOperator.Type.LessThanEqual => return 6u8
      CBinaryOperator.Type.LogAnd => return 11u8
      CBinaryOperator.Type.LogOr => return 12u8
      CBinaryOperator.Type.BitAnd => return 8u8
      CBinaryOperator.Type.BitOr => return 10u8
      CBinaryOperator.Type.BitXor => return 9u8
      CBinaryOperator.Type.ShiftLeft => return 5u8
      CBinaryOperator.Type.ShiftRight => return 5u8
      CBinaryOperator.Type.Assign => return 14u8
    }
  }

  func isSigned(self) -> bool {
    return self.leftCExpr.isSigned()
  }

  func width(self) -> u32 {
    return self.leftCExpr.width()
  }

  func tostring(self) -> string {
    switch self.type {
      CBinaryOperator.Type.Plus => return "+"
      CBinaryOperator.Type.Minus => return "-"
      CBinaryOperator.Type.Times => return "*"
      CBinaryOperator.Type.Divides => return "/"
      CBinaryOperator.Type.Modulus => return "%"
      CBinaryOperator.Type.Equals => return "=="
      CBinaryOperator.Type.NotEquals => return "!="
      CBinaryOperator.Type.GreaterThan => return ">"
      CBinaryOperator.Type.GreaterThanEqual => return ">="
      CBinaryOperator.Type.LessThan => return "<"
      CBinaryOperator.Type.LessThanEqual => return "<="
      CBinaryOperator.Type.LogAnd => return "&&"
      CBinaryOperator.Type.LogOr => return "||"
      CBinaryOperator.Type.BitAnd => return "&"
      CBinaryOperator.Type.BitOr => return "|"
      CBinaryOperator.Type.BitXor => return "^"
      CBinaryOperator.Type.ShiftLeft => return "<<"
      CBinaryOperator.Type.ShiftRight => return ">>"
      CBinaryOperator.Type.Assign => return "="
    }
  }

  func emit(self, e: CEmitter) {
    // Handle equality and inequality specially -- because these
    // can be applied to aggregate structures, we can't just use
    // plain C equality operator, which is only defined for primitive
    // types.
    //
    // TODO: Do we want to define lexiographic ordering over tuples? If so
    // we shall need to extend this scheme for the other comparison
    // operators.
    if (self.type == CBinaryOperator.Type.Equals
        || self.type == CBinaryOperator.Type.NotEquals) {
      self.emitEquality(e)
      return
    }

    if self.precedence() < self.leftCExpr.precedence() {
      e.write("(")
      self.leftCExpr.emit(e)
      e.write(")")
    } else {
      self.leftCExpr.emit(e)
    }

    e.space()
    e.write(self.tostring())
    e.space()

    if self.precedence() < self.rightCExpr.precedence() {
      e.write("(")
      self.rightCExpr.emit(e)
      e.write(")")
    } else {
      self.rightCExpr.emit(e)
    }
  }


  func emitEquality(self, e: CEmitter) {
     e.needPrimitiveTypeEqualities()
     if self.type == CBinaryOperator.Type.NotEquals {
       e.write("!")
     }

     assert !isnull(self.ctype)
     e.write("isequal_%s_t(" % self.ctype.toString())

     self.leftCExpr.emit(e)
     e.write(", ")
     self.rightCExpr.emit(e)
     e.write(")")
  }
}


relation OneToOne CDotExpr CExpr cascade

class CDotExpr(self, location: db.Location, left: CExpr, field: string) {
  self.insertCExpr(left)
  self.field = field

  func precedence(self) -> u8 {
    return 1u8
  }

  func isSigned(self) -> bool {
    // TODO
    return false
  }

  func width(self) -> u32 {
    // TODO
    return 0u32
  }

  func tostring(self) -> string {
    return "."
  }

  func emit(self, e: CEmitter) {
    if self.precedence() < self.cExpr.precedence() {
      e.write("(")
      self.cExpr.emit(e)
      e.write(")")
    } else {
      self.cExpr.emit(e)
    }
    e.write(".%s" % self.field)
  }
}

relation OneToOne CIndexExpr CExpr: "array" cascade
relation OneToOne CIndexExpr CExpr: "index" cascade

class CIndexExpr(self, location: db.Location, left: CExpr, index: CExpr) {
  self.insertArrayCExpr(left)
  self.insertIndexCExpr(index)

  func precedence(self) -> u8 {
    return 1u8
  }

  func isSigned(self) -> bool {
    // TODO
    return false
  }

  func width(self) -> u32 {
    // TODO
    return 0u32
  }

  func tostring(self) -> string {
    return "[]"
  }

  func emit(self, e: CEmitter) {
    if self.precedence() < self.cExpr.precedence() {
      e.write("(")
      self.arrayCExpr.emit(e)
      e.write(")")
    } else {
      self.arrayCExpr.emit(e)
    }
    e.write("[")
    self.indexCExpr.emit(e)
    e.write("]")
  }
}



enum CRuntimeFunction {
   UserDefined

   // Well-known C Standard Library functions
   Printf

   // Rune built-in operators
   AddWithOverflowDetect
   SubWithOverflowDetect
   MulWithOverflowDetect
   DivWithOverflowDetect
   Exponentiate
   RotateLeft
   RotateRight

   // String builtins
   StringAppend

   // To-string builtins
   GlobalStringWriterReset
   GlobalStringWriterWrite
   GlobalStringWriterString

   // Array builtins
   ArrayAlloc
   ArrayAppend
   ArrayLength
   ArrayReverse
   ArrayValues
   ArrayItems
   ArrayConcat
}

class CCall(self, location: db.Location, fntype: CRuntimeFunction, args: CExpr?, fn: CExpr? = null(CExpr),
relevantType: CTypeExpr?) {
  self.location = location
  self.fntype = fntype
  self.relevantType = relevantType
  self.args = args
  self.fn = fn
  if isnull(args) {
    self.signedType = false
    self.bitwidth = 0u32
  } else {
    self.signedType = args.isSigned()
    self.bitwidth = args.width()
  }

  func isSigned(self) -> bool {
    // **********************************************************************
    // ************* TODO: we need to wait for the typechecker to be complete
    // ************* in order to know what the return type sign will be
    // **********************************************************************
    return false
  }

  func width(self) -> u32 {
    // **********************************************************************
    // ************* TODO: we need to wait for the typechecker to be complete
    // ************* in order to know what the return type width will be
    // **********************************************************************
    return 64u32
  }

  func emit(self, e: CEmitter) {
    wasPrintf = e.printfArg
    switch self.fntype {
      // User-defined function call.
      CRuntimeFunction.UserDefined => {
        assert !isnull(self.fn)
        self.fn.emit(e)
      }

      // Well-known C Standard Library functions.
      CRuntimeFunction.Printf => {
        e.include("<stdio.h>")
        e.printfArg = true
        e.write("printf")
      }

      // Rune built-in arithmetic operators.
      CRuntimeFunction.AddWithOverflowDetect => {
        e.write(e.needIntAdd(self.signedType, self.bitwidth))
      }
      CRuntimeFunction.SubWithOverflowDetect => {
        e.write(e.needIntSub(self.signedType, self.bitwidth))
      }
      CRuntimeFunction.MulWithOverflowDetect => {
        e.write(e.needIntMul(self.signedType, self.bitwidth))
      }
      CRuntimeFunction.DivWithOverflowDetect => {
        e.write(e.needIntDiv(self.signedType, self.bitwidth))
      }
      // TODO: exponentiation should work with floats as well as ints. For now it
      // is for ints only. We won't be able to fully handle these until type
      // information is stored in the HIR.
      CRuntimeFunction.Exponentiate => {
        e.write(e.needIntExp(self.signedType, self.bitwidth))
      }
      CRuntimeFunction.RotateLeft => {
        e.write(e.needRotl(self.bitwidth))
      }
      CRuntimeFunction.RotateRight => {
        e.write(e.needRotr(self.bitwidth))
      }

      // StringWriter
      CRuntimeFunction.GlobalStringWriterReset => {
        e.needStringWriter()
        e.write("GlobalStringWriter_reset")
      }
      CRuntimeFunction.GlobalStringWriterWrite => {
        e.needStringWriter()
        e.write("GlobalStringWriter_write")
      }
      CRuntimeFunction.GlobalStringWriterString => {
        e.needStringWriter()
        e.write("GlobalStringWriter_string")
      }

      CRuntimeFunction.ArrayAlloc => {
        e.write(e.needArrayAlloc())
      }
      CRuntimeFunction.ArrayAppend => {
        // ArrayAppend is always generated from a statement like
        // l.append(e), we want to emit something like: "l = array_append(l, e)"
	// because array_append can change the address in memory where the
	// array lives.
        array = self.args.cExprList.index(0)
        if array.type == CExpr.Type.Identifier {
          array.emit(e)
          e.write(" = ")
        }
        e.write(e.needArrayAppend(self.relevantType!))
      }
      CRuntimeFunction.ArrayConcat => {
        array = self.args.cExprList.index(0)
        if array.type == CExpr.Type.Identifier {
          array.emit(e)
          e.write(" = ")
        }
        e.write(e.needArrayConcat())
      }
      CRuntimeFunction.ArrayLength => {
        e.write(e.needArrayLength())
      }
      CRuntimeFunction.ArrayReverse => {
        e.write(e.needArrayReverse())
      }
//      CRuntimeFunction.ArrayItems => {
//      }
//      CRuntimeFunction.ArrayValues => {
//      }

      default => {
        raise Status.Unimplemented, "C call is not yet supported by the C backend: ", self.fntype
      }
    }
    e.write("(")
    if !isnull(self.args) {
      self.args.emit(e)
    }
    e.write(")")
    e.printfArg = wasPrintf
  }
}


// Eventual Value type  CLiteral | CExprList | CIdentifier | CAssignOp | CUnaryOp | CBinaryOp | CFuncall | CSubscript | CField | CConditional
relation OneToOne CExpr CExprList cascade
relation OneToOne CExpr CLiteral cascade
relation OneToOne CExpr CIdentifier cascade
relation OneToOne CExpr CTypeExpr cascade
relation OneToOne CExpr: "parent" CDotExpr: "child" cascade
relation OneToOne CExpr CIndexExpr cascade
relation OneToOne CExpr CCall cascade
relation OneToOne CExpr: "parent" CPrefixOperator: "child" cascade
relation OneToOne CExpr: "parent" CBinaryOperator: "child" cascade

class CExpr(self, value: CLiteral | CIdentifier | CPrefixOperator | CBinaryOperator | CCall | CExprList | CTypeExpr | CDotExpr | CIndexExpr)  {

  enum Type {
    Literal
    Identifier
    AssignOp
    PrefixOp
    BinaryOp
    FunCall
    Subscript
    Field
    Index
    Conditional
    List
    TypeExpr
  }

  typeswitch value {
    CLiteral => {
      self.type = Type.Literal
      self.insertCLiteral(value)
    }
    CIdentifier => {
      self.type = Type.Identifier
      self.insertCIdentifier(value)
    }
    CExprList => {
      self.type = Type.List
      self.insertCExprList(value)
    }
    CPrefixOperator => {
      self.type = Type.PrefixOp
      self.insertChildCPrefixOperator(value)
    }
    CBinaryOperator => {
      self.type = Type.BinaryOp
      self.insertChildCBinaryOperator(value)
    }
    CCall => {
      self.type = Type.FunCall
      self.insertCCall(value)
    }
    CTypeExpr => {
      self.type = Type.TypeExpr
      self.insertCTypeExpr(value)
    }
    CDotExpr => {
      self.type = Type.Field
      self.insertChildCDotExpr(value)
    }
    CIndexExpr => {
      self.type = Type.Index
      self.insertCIndexExpr(value)
    }
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CExpr.Type.Literal => self.cLiteral.emit(e)
      CExpr.Type.Identifier => self.cIdentifier.emit(e)
      CExpr.Type.List => self.cExprList.emit(e)
      CExpr.Type.PrefixOp => self.childCPrefixOperator.emit(e)
      CExpr.Type.BinaryOp => self.childCBinaryOperator.emit(e)
      CExpr.Type.FunCall => self.cCall.emit(e)
      CExpr.Type.TypeExpr => self.cTypeExpr.emit(e)
      CExpr.Type.Field => self.childCDotExpr.emit(e)
      CExpr.Type.Index => self.cIndexExpr.emit(e)
    }
  }

  func precedence(self) -> u8 {
    switch self.type {
      CExpr.Type.Literal  => return 0u8
      CExpr.Type.Identifier => return 0u8
      CExpr.Type.List     => return 0u8
      CExpr.Type.PrefixOp => return self.childCPrefixOperator.precedence()
      CExpr.Type.BinaryOp => return self.childCBinaryOperator.precedence()
      CExpr.Type.FunCall  => return 1u8
      CExpr.Type.TypeExpr => return 0u8
      CExpr.Type.Field    => return self.childCDotExpr.precedence()
      CExpr.Type.Index    => return 1u8
    }
  }

  func isSigned(self) -> bool {
    switch self.type {
      CExpr.Type.Literal  => return self.cLiteral.isSigned()
      CExpr.Type.Identifier => return self.cIdentifier.isSigned()
      CExpr.Type.List     => return self.cExprList.isSigned()
      CExpr.Type.PrefixOp => return self.childCPrefixOperator.isSigned()
      CExpr.Type.BinaryOp => return self.childCBinaryOperator.isSigned()
      CExpr.Type.FunCall  => return self.cCall.isSigned()
      CExpr.Type.TypeExpr => return false
      CExpr.Type.Field    => return self.childCDotExpr.isSigned()
      CExpr.Type.Index    => return self.cIndexExpr.isSigned()
    }
  }

  func width(self) -> u32 {
    switch self.type {
      CExpr.Type.Literal  => return self.cLiteral.width()
      CExpr.Type.Identifier => return self.cIdentifier.width()
      CExpr.Type.List => return self.cExprList.width()
      CExpr.Type.PrefixOp => return self.childCPrefixOperator.width()
      CExpr.Type.BinaryOp => return self.childCBinaryOperator.width()
      CExpr.Type.FunCall  => return self.cCall.width()
      CExpr.Type.TypeExpr => return 0u32
      CExpr.Type.Field => return self.childCDotExpr.width()
      CExpr.Type.Index => return self.cIndexExpr.width()
    }
  }
}

relation DoublyLinked CExprList CExpr cascade

class CExprList(self) {
  func append(self, expr: CExpr) {
    self.appendCExpr(expr)
  }

  func index(self, i) {
    return self.indexCExpr(i)
  }

  func width(self) -> u32 {
    // This function is used to determine the width of arguments
    // to operators like +, *.  We should only give the width of
    // the first argument.
    if self.countCExprs() == 0 {
      return 0u32
    } else {
      return self.firstCExpr.width()
    }
  }

  func isSigned(self) -> bool {
    // This function is used to determine the signedness of arguments
    // to operators like +, *.  We should only give the signedness of
    // the first argument.
    if self.countCExprs() == 0 {
      return false
    } else {
      return self.firstCExpr.isSigned()
    }
  }

  func emit(self, e: CEmitter) {
    firstTime = true
    for child in self.cExprs() {
      if !firstTime {
        e.write(",")
        e.space()
      }
      firstTime = false
      width = child.width()
      if width > 0u32 {
        if width <= 8u32 {
          width = 8u32
        } else if width <= 16u32 {
          width = 16u32
        } else if width <= 32u32 {
          width = 32u32
        } else {
          width = 64u32
        }
        if width < 64u32 {
          if !child.isSigned() {
            tyname = "uint%s_t" % int2cstring(width)
          } else {
            tyname = "int%s_t" % int2cstring(width)
          }
          e.write("(%s)(" % tyname)
          child.emit(e)
          e.write(")")
        } else {
          child.emit(e)
        }
      } else {
        child.emit(e)
      }
    }
  }
}


// Parameters ------------------------------------------------------------------
class CParameter(self, location: db.Location, name: string, type: CTypeExpr) {
  self.location = location
  self.name = name
  self.type = type

  func emit(self, e: CEmitter) {
    // Need more advanced logic here for declarators.
    if !isnull(self.type) {
       self.type.emit(e)
       e.space()
    }
    e.write(self.name)
  }
}

relation DoublyLinked CParamList CParameter cascade

class CParamList(self) {

  func append(self, p: CParameter) {
     self.appendCParameter(p)
  }

  func emit(self, e: CEmitter, separator: string) {
    firstTime = true
    // self.cparameters() is generated by the relation statement below.
    for param in self.cParameters() {
       if !firstTime {
         e.write(separator)
       }
       firstTime = false
       param.emit(e)
    }
  }
}


// Statements ------------------------------------------------------------------

relation OneToOne CStatement CExpr cascade
relation OneToOne CStatement: "parent" CBlock: "sub" cascade

class CStatement(self, location: db.Location, type: CStatementType,
                 expr: CExpr? = null(CExpr), body: CBlock? = null(CBlock)) {
  self.location = location
  self.type = type
  if !isnull(expr) {
    self.insertCExpr(expr!)
  }
  if !isnull(body) {
    self.insertSubCBlock(body!)
  }

  func emit(self, e: CEmitter) {
    switch self.type {
      CStatementType.If => {
        assert !isnull(self.subCBlock)
        e.write("if (")
        self.cExpr.emit(e)
        e.writeopenln(") {")
        self.subCBlock.emit(e)
        // else and else if statements will assume the previous if was closed.
        e.writecloseln("}")
      }
      CStatementType.Else => {
        e.writeopenln("else {")
        self.subCBlock.emit(e)
        e.writecloseln("}")
      }
      CStatementType.ElseIf => {
        assert !isnull(self.subCBlock)
        assert !isnull(self.cExpr)
        e.write("else if (")
        self.cExpr.emit(e)
        e.writeopenln(") {")
        self.subCBlock.emit(e)
        e.writecloseln("}")
      }
      CStatementType.For => {
        // Right now, only handles for loops of the form
        // for <assign>, <condition>, <increment> {
        //  ...
        // }
        assert !isnull(self.subCBlock)
        assert !isnull(self.cExpr)
        e.write("for (")
        assert self.cExpr.type == CExpr.Type.List
        first = true
        for child in self.cExpr.cExprList.cExprs() {
            if (!first) {
              e.write("; ")
            }
            first = false
            child.emit(e)
        }
        e.writeopenln(") {")
        self.subCBlock.emit(e)
        e.writecloseln("}")
      }
      CStatementType.Return => {
        assert isnull(self.subCBlock)
        assert !isnull(self.cExpr)
        e.write("return")
        if !isnull(self.cExpr) {
          e.space()
          self.cExpr.emit(e)
        }
        e.write(";")
      }
      default => {
        self.cExpr.emit(e)
        e.write(";")
      }
    }
  }
}

// Blocks ---------------------------------------------------------------------
// A CBlock is a list of C Statements, the following relation will add
// methods to insert and append statements into that block.
relation DoublyLinked CBlock CStatement cascade
relation HashedClass CBlock CIdentifier cascade

class CBlock(self, location: db.Location) {
   self.location = location

   func declare(self, id: CIdentifier) { //, value: CExpr) {
     // add a declaration to the top of the block.
     exists = self.findCIdentifier(id)
     if isnull(exists) {
        self.insertCIdentifier(id)
     }
   }

   func emit(self, e: CEmitter) {
     for id in self.cIdentifiers() {
       id.emitDeclaration(e)
     }

     firstWritten = false
     for s in self.cStatements() {
        if firstWritten {
          e.newline()
        }
        s.emit(e)
        firstWritten = true
     }
   }
}


// Declarations ---------------------------------------------------------------

class CArrayDeclaration(self, location: db.Location, typeName: string, elementType: CTypeExpr) {
  self.location = location
  self.typeName = typeName
  self.elementType = elementType;
  self.name = typeName

  /* Emitting this class needs to define the array type (e.g., array_uint8_t) plus
   * methods to initialize it and destroy it
   */
  func emit(self, e: CEmitter, proto: bool) {
    e.include("<stdarg.h>")
    e.needArrayAlloc()
    e.needStringWriter()
    e.needPrimitiveTypeEqualities()

    elementTypeString = self.elementType.toString()
    // Emit typedef ---------------------------------------------
    e.writeln("typedef %s_t *%s_array_t;" % (elementTypeString, elementTypeString))
    e.writeln("")

    // Emit the init function -----------------------------------
    e.write("%s_t *%s_init(size_t num_initializers, ...)" % (elementTypeString, self.typeName))

    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {");
      e.writeln("va_list ap;")
      e.writeln("size_t i;")
      e.writeln("")
      e.writeln("%s_t *a = (%s_t*)array_alloc(sizeof(%s_t), num_initializers);" % (
        elementTypeString, elementTypeString, elementTypeString))
      e.writeln("va_start(ap, num_initializers);")
      e.writeopenln("for (i = 0; i < num_initializers; ++i) {")
      e.write("a[i] = va_arg(ap, %s_t);" % elementTypeString)
      e.writecloseln("}")
      e.write("return a;")
      e.writecloseln("}")
    }
    e.writeln("")

    // Emit the toString function -----------------------------------
    e.write("void tostring_%s_t(%s_t a[])" % (self.typeName, elementTypeString))
    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {")
      e.writeln("array_t *array = ((array_t*)a) - 1;")
      e.writeln("size_t i;");

      e.writeln("tostring_string_t(\"[\");")
      e.writeopenln("for(i = 0; i < array->used; ++i) {")
      e.writeln("if (i > 0) tostring_string_t(\", \");")

      if (self.elementType.type == CTypeExpr.Type.Defined
          && self.elementType.cDefinedType.name == "string") {
         e.write("tostring_string_t(\"\\\"%s\\\"\", a[i]);")
      } else {
         e.write("tostring_%s_t(a[i]);" % elementTypeString)
      }
      e.writecloseln("}")
      e.write("tostring_string_t(\"]\");")
      e.writecloseln("}")
    }
    e.writeln("")

    // Emit the equality function -------------------------------
    // TODO: use parameterized C fragments to avoid emitting this in code
    e.write("bool isequal_%s_t(%s_t a1, %s_t a2)" % (self.typeName, self.typeName, self.typeName))
    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {")
      e.writeln("array_t *s1a = ((array_t*)a1) - 1;")
      e.writeln("array_t *s2a = ((array_t*)a2) - 1;")
      e.writeln("size_t i;");
      e.writeln("")
      e.writeln("if (s1a->used != s2a->used) return false;")
      e.writeopenln("for (i = 0; i < s1a->used; ++i) {")
      e.write("if (!isequal_%s_t(a1[i], a2[i])) return false;" % elementTypeString)
      e.writecloseln("}")
      e.write("return true;")
      e.writecloseln("}")
    }
    e.writeln("")

    // Emit the append function -------------------------------
    // TODO: use parameterized c fragments to avoid emitting this here.
    e.write("%s_t append_%s_t(%s_t a, %s_t e)" % (self.typeName, self.typeName, self.typeName, elementTypeString))
    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {")
      e.writeln("array_t *array = ((array_t*)a) - 1;")
      e.writeln("array = array_resize(array, array->used + 1);")
      e.writeln("a = (%s_t *)(array + 1);" % elementTypeString)
      e.writeln("a[array->used] = e;")
      e.writeln("array->used += 1;")
      e.write("return a;")
      e.writecloseln("}")
    }
  }
}

relation OneToOne CStructDeclaration CParamList cascade

class CStructDeclaration(self, location: db.Location, name: string, fields: CParamList,
                         isTuple: bool) {
  // Structs (inc. tuples) are allocated on the stack.
  self.location = location
  self.name = name
  self.isTuple = isTuple
  self.insertCParamList(fields)
  self.protoEmitted = false

  func emit(self, e: CEmitter, proto: bool) {
    e.include("<stdlib.h>")
    e.include("<stdio.h>")
    e.needBoolType()
    e.needStringWriter()
    e.needPrimitiveTypeEqualities()

    // Emit the structure definition and typedef ----------------------
    if proto {
      e.writeln("typedef struct %s_t %s_t;" % (self.name, self.name))
      self.protoEmitted = true
    } else {
      if self.protoEmitted {
        e.writeln("struct %s_t" % self.name)
      } else {
        e.write("typedef struct %s_t {" % self.name)
      }
      e.indent()
      for field in self.cParamList.cParameters() {
        e.newline()
        field.emit(e)
        e.write(";")
      }
      e.writecloseln("} %s_t;" % self.name)
      e.newline()
    }

    // Emit the init function ----------------------------------
    e.write("%s_t %s(" % (self.name, self.name))
    first = true
    for field in self.cParamList.cParameters() {
      if !first {
        e.write(",")
        e.space()
      }
      field.emit(e)
      first = false
    }
    if proto {
      e.writeln(");")
    } else {
      e.writeopenln(") {")
      if self.cParamList.countCParameters() == 0 {
        e.writeln("%s_t str;" % self.name)
      } else {
        e.writeln("%s_t str = {0};" % self.name)
      }
      for field in self.cParamList.cParameters() {
        e.writeln("str.%s = %s;" % (field.name, field.name))
      }
      e.write("return str;")
      e.writecloseln("}")
      e.newline()
    }

    // Emit the toString function ----------------------------------
    e.write("void tostring_%s_t(%s_t str)" % (self.name, self.name))
    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {")
      e.write("tostring_string_t(\"")
      if !self.isTuple {
         e.write(self.name)
      }
      e.writeln("(\");")
      first = true
      for field in self.cParamList.cParameters() {
        if !first {
          e.writeln("tostring_string_t(\", \");")
        }
        first = false
        if (field.type.type == CTypeExpr.Type.Defined
            && field.type.cDefinedType.name == "string") {
          e.write("tostring_string_t(\"\\\"%s\\\"\", ")
        } else {
          e.write("tostring_")
          field.type.emit(e)
          e.write("(")
        }
        e.writeln("str.%s);" % field.name)
      }
      if self.cParamList.countCParameters() == 1 {
        e.write("tostring_string_t(\",)\");")
      } else {
        e.write("tostring_string_t(\")\");")
      }
      e.writecloseln("}")
      e.newline()
    }

    // Emit the equality function -------------------------------
    e.write("bool isequal_%s_t(%s_t s1, %s_t s2)" % (self.name, self.name, self.name))
    if proto {
      e.writeln(";")
    } else {
      e.writeopenln(" {")
      e.write("return ")
      first = true
      if self.cParamList.countCParameters() == 0 {
        e.write("true")
      } else {
        for field in self.cParamList.cParameters() {
          if !first {
            e.newline()
            e.write("    && ")
          }
          first = false
          e.write("isequal_%s_t(s1.%s, s2.%s)" % (field.type.toString(), field.name, field.name))
        }
      }
      e.write(";")
      e.writecloseln("}")
    }
  }
}


class CFunctionDeclaration(self, location: db.Location, id: Sym,
                           params: CParamList, returnType: CTypeExpr,
                           body: CBlock) {
   self.location = location
   self.id = id
   self.params = params
   self.returnType = returnType
   self.body = body

   func emit(self, e: CEmitter, proto: bool) {
     self.returnType.emit(e)
     e.space()
     e.write(self.id.name + "(")
     self.params.emit(e, ", ")
     if proto {
       e.write(");")
     } else {
       e.writeopenln(") {")
       self.body.emit(e)
       e.writecloseln("}")
     }
     e.newline()
   }
}


// eventually, pass in CFunDef | CTypeDef | CStructDef | ....
relation OneToOne CDeclaration CFunctionDeclaration cascade
relation OneToOne CDeclaration CStructDeclaration cascade
relation OneToOne CDeclaration CArrayDeclaration cascade

class CDeclaration(self, declaration: CFunctionDeclaration | CStructDeclaration | CArrayDeclaration) {
  self.dependencies = arrayof(string)

  enum Type {
    Function
    Struct
    Array
  }

  typeswitch declaration {
    CFunctionDeclaration => {
      self.type = Type.Function
      self.insertCFunctionDeclaration(declaration)
    }
    CStructDeclaration => {
      self.type = Type.Struct
      self.insertCStructDeclaration(declaration)
    }
    CArrayDeclaration => {
      self.type = Type.Array
      self.insertCArrayDeclaration(declaration)
    }
  }
  // Don't emit the declaration or its prototype more than once.
  self.emitted = false

  func name(self) -> string {
    switch self.type {
      CDeclaration.Type.Function => return self.cFunctionDeclaration.id.name
      CDeclaration.Type.Struct => return self.cStructDeclaration.name
      CDeclaration.Type.Array => return self.cArrayDeclaration.typeName
    }
  }

  func addDependencyName(self, n: string) {
    // linear-time implementation, expecting that the number of dependencies
    // for a declaration will be fairly small.
    for m in self.dependencies {
      if n == m {
        return
      }
    }
    self.dependencies.append(n)
  }

  func addDependency(self, d: CDeclaration) {
     self.addDependencyName(d.name())
  }

  func addDependencies(self, names: [string]) {
    for name in names {
      self.addDependencyName(name)
    }
  }

  func emit(self, e: CEmitter) {
    if !self.emitted {
      // The loop in the main program ensures that dependencies are emitted
      // first.
      switch self.type {
        CDeclaration.Type.Function => self.cFunctionDeclaration.emit(e, false)
        CDeclaration.Type.Struct => self.cStructDeclaration.emit(e, false)
        CDeclaration.Type.Array => self.cArrayDeclaration.emit(e, false)
      }
      self.emitted = true
    }
  }

  func emitProto(self, e: CEmitter) {
    if !self.protoEmitted {
      // The loop in the main program ensures that dependencies are emitted
      // first.
      switch self.type {
        CDeclaration.Type.Function => self.cFunctionDeclaration.emit(e, true)
        CDeclaration.Type.Struct => self.cStructDeclaration.emit(e, true)
      }
      self.protoEmitted = true
    }
  }
}




// When emitting a declaration, we must ensure to emit dependenty
// declarations first. However, sometimes we encounter a recursive
// or mutually recursive definition. To handle this case, we need to
// track the stack of declarations that are waiting to be emitted
// (because we are emitting their dependencies firest). For a
// (mutually-)recursive definition, a dependency will occur in the
// stack of declarations waiting to be emitted.
class DependencyChain(self) {
  self.chain = arrayof(string)
  self.max = 0
  self.count = 0

  func push(self, name) {
    if self.count == self.max {
      self.chain.append(name)
      self.max += 1
    } else {
      self.chain[self.count] = name
    }
    self.count += 1
  }

  func pop(self) {
    assert self.count > 0
    self.count -= 1
  }

  func contains(self, name: string) -> bool {
    // A linear-time algorithm should be fine, because we don't expect
    // very long dependency chains. If it becomes a problem we can
    // migrate to a hash set later.
    for i in range(self.count) {
      if name == self.chain[i] {
        return true
      }
    }
    return false
  }
}

// Program --------------------------------------------------------------------

relation DoublyLinked CProgram CDeclaration cascade
relation OneToOne CProgram CBlock:"Main" cascade

class CProgram(self) {
  self.insertMainCBlock(CBlock(null(db.Location)))

  func addStatementToMain(self, statement: CStatement) {
    self.mainCBlock.appendCStatement(statement)
  }

  func addCDeclaration(self, dec: CDeclaration) {
    self.insertCDeclaration(dec)
  }

  func findCDeclaration(self, name: string) -> CDeclaration? {
    for dec in self.cDeclarations() {
      if dec.name() == name {
        return dec
      }
    }
    return null(CDeclaration)
  }

  func emitCDeclaration(self, e: CEmitter, depchain: DependencyChain, name: string) {
    dec = self.findCDeclaration(name)
    if isnull(dec) {
      // This is most likely a local variable definition
      return
    }
    if depchain.contains(name) {
      dec.emitProto(e)
    } else {
      depchain.push(name)
      if !dec.emitted {
        for depname in dec.dependencies {
           self.emitCDeclaration(e, depchain, depname)
        }
        dec.emit(e)
        e.newline()
      }
      depchain.pop()
    }
  }

  func emit(self, e: CEmitter) {
    depchain = DependencyChain()
    anyDeclarations = false
    for declaration in self.cDeclarations() {
      anyDeclarations = true
      self.emitCDeclaration(e, depchain, declaration.name())
    }
    if anyDeclarations {
      e.newline()
      e.newline()
    }
    e.write("int main(int argc, const char **argv) {")
    e.indent()
    e.newline()
    self.mainCBlock.emit(e)
    e.deindent()
    e.newline()
    e.writeln("  return 0;\n}")
  }
}
