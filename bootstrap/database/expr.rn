//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sym

use filepath
use location
use value
use bigint
use datatype
use ident
use statement
use variable
use function

import cbackend as c
import types


enum ExprType {
  Constant // Any constant such as true, false, "test", 1, 3.14f32, 0xabci255, etc.
  RandUint  // e.g. rand256.
  Ident  // a
  Array  // [1u8, 2u8, 3u8, 4u8] or "passed"
  Modint  // 2 mod p
  // If you modify the list from Add to Rotr, also update the corresponding
  // assignment operator types, in the same order.
  Add  // a + b
  Sub  // a - b
  Mul  // a * b
  Div  // a / b
  Mod  // a % b
  And  // a && b
  Or   // a || b
  Xor  // a ^^ b
  Bitand  // a & b
  Bitor   // a | b
  Bitxor  // a ^ b
  Exp  // a ** b
  Shl  // a << b
  Shr  // a >> b
  Rotl  // a <<< b
  Rotr  // a >>> b
  AddTrunc  // a !+ b
  SubTrunc  // a !- b
  MulTrunc  // a !* b
  Bitnot  // ~a
  Lt  // a < b
  Le  // a <= b
  Gt  // a > b
  Ge  // a >= b
  Equal  // a == b
  Notequal  // a != b
  Negate  // -a
  NegateTrunc  // !-a
  Not  // !a
  Cast  // <b>a
  CastTrunc  // !<b>a
  Select  // passed? a : b
  Call  // fact(n)
  Index  // a[i]
  Slice  // a[a:b]
  Secret  // secret(password)
  Reveal  // reveal(mac)
  Equals  // a = b
  // If you modify the list from AddEquals to RotrEquals, also update the
  // corresponding operator types, in the same order.
  AddEquals  // a += b
  SubEquals  // a -= b
  MulEquals  // a *= b
  DivEquals  // a /= b
  ModEquals  // a %= b
  AndEquals  // a &&= b
  OrEquals   // a ||= b
  XorEquals  // a ^^= b
  BitandEquals  // a &= b
  BitorEquals   // a |= b
  BitxorEquals  // a ^= b
  ExpEquals  // a **= b
  ShlEquals  // a <<= b
  ShrEquals  // a >>= b
  RotlEquals  // a <<<= b
  RotrEquals  // a >>>= b
  AddTruncEquals  // a !+ b
  SubTruncEquals  // a !- b
  MulTruncEquals  // a !* b
  Dot  // a.b
  Dotdotdot  // case u1 ... u32
  List  // fact(a, b, c)
  Tuple  // return (1, 2, "passed")
  As  // import foo as bar
  In  // if element in set
  Const  // const self.x = x
  Null  // null(Node())
  Notnull  // n = node!
  Funcaddr  // &max(0u32, 0u32)
  Arrayof  // arrayof(u32)
  Typeof  // typeof a
  Unsigned  // unsigned(3i32)
  Signed  // signed(3u32)
  Widthof  // widthof a
  Isnull  // isnull(entry)
  // Type expressions:
  UintType  // x: u32 = y
  IntType  // x: i32 = y
  FloatType  // x: f32 = y
  StringType  // x: string = y
  BoolType  // done: bool = checkForDone()
  NoneType  // func foo(x) -> none
  Typeindex  // u32[]
  Namedparam  // Myclass(name = "me", profession = "hacker")
}

// Return the operator precedence.  This is similar to C, but fixes an acknowledged mistake:
// bitwise operators should bind more tightly than relational operators.  By the time C's
// authors realized this mistake, there was already too much C code that would break to fix it.
// Example: "value & 1 == 0" should test that value is even, but in C the result is always 0.
func getPrecedence(type: ExprType) -> u32 {
  switch type {
    // In increasing order of precedence.
    ExprType.Dotdotdot => return 1u32
    ExprType.Select => return 2u32
    ExprType.Or => return 3u32
    ExprType.Xor => return 4u32
    ExprType.And => return 5u32
    ExprType.In => return 6u32
    ExprType.Modint => return 7u32
    ExprType.Lt, ExprType.Le, ExprType.Gt, ExprType.Ge, ExprType.Equal, ExprType.Notequal => return 8u32

    ExprType.Bitor => return 9u32
    ExprType.Bitxor => return 10u32
    ExprType.Bitand => return 11u32
    ExprType.Shl, ExprType.Shr, ExprType.Rotl, ExprType.Rotr => return 12u32
    ExprType.Sub, ExprType.Add, ExprType.SubTrunc, ExprType.AddTrunc => return 13u32
    ExprType.Mul, ExprType.Div, ExprType.Mod, ExprType.MulTrunc => return 14u32
    ExprType.Exp, ExprType.Not, ExprType.Bitnot, ExprType.Negate, ExprType.NegateTrunc, ExprType.Cast, ExprType.CastTrunc => return 15u32
    ExprType.Dot, ExprType.Notnull, ExprType.Call, ExprType.Index, ExprType.Slice => return 16u32
    ExprType.Ident, ExprType.Constant, ExprType.Array, ExprType.Tuple, ExprType.Secret, ExprType.Reveal, ExprType.Arrayof, ExprType.Typeof, ExprType.Null, ExprType.Funcaddr, ExprType.Unsigned, ExprType.Signed, ExprType.Widthof, ExprType.Isnull => return 17u32

    default => return 1u32
  }
}

// Return the expression type's name.
func getExprTypeName(type: ExprType) -> string {
  switch type {
    ExprType.Ident => return "<ident>"
    ExprType.Array => return "<array>"
    ExprType.Add => return "+"
    ExprType.Sub => return "-"
    ExprType.Mul => return "*"
    ExprType.Div => return "/"
    ExprType.Mod => return "%"
    ExprType.And => return "&&"
    ExprType.Or => return "||"
    ExprType.Xor => return "^^"
    ExprType.Bitand => return "&"
    ExprType.Bitor => return "|"
    ExprType.Bitxor => return "^"
    ExprType.Exp => return "**"
    ExprType.Shl => return "<<"
    ExprType.Shr => return ">>"
    ExprType.Rotl => return "<<<"
    ExprType.Rotr => return ">>>"
    ExprType.AddTrunc => return "!+"
    ExprType.SubTrunc => return "!-"
    ExprType.MulTrunc => return "!*"
    ExprType.Bitnot => return "~"
    ExprType.Lt => return "<"
    ExprType.Le => return "<="
    ExprType.Gt => return ">"
    ExprType.Ge => return ">="
    ExprType.Equal => return "=="
    ExprType.Notequal => return "!="
    ExprType.Negate => return "-"
    ExprType.NegateTrunc => return "!-"
    ExprType.Not => return "!"
    ExprType.Cast => return "<>"
    ExprType.CastTrunc => return "!<>"
    ExprType.Select => return "?:"
    ExprType.Call => return "()"
    ExprType.Index => return "[]"
    ExprType.Slice => return "[:]"
    ExprType.Secret => return "secret"
    ExprType.Reveal => return "reveal"
    ExprType.Equals => return "="
    ExprType.AddEquals => return "+="
    ExprType.SubEquals => return "-="
    ExprType.MulEquals => return "*="
    ExprType.DivEquals => return "/="
    ExprType.ModEquals => return "%="
    ExprType.AndEquals => return "&&="
    ExprType.OrEquals => return "||="
    ExprType.XorEquals => return "^^="
    ExprType.BitandEquals => return "&="
    ExprType.BitorEquals => return "|="
    ExprType.BitxorEquals => return "^="
    ExprType.ExpEquals => return "**="
    ExprType.ShlEquals => return "<<="
    ExprType.ShrEquals => return ">>="
    ExprType.RotlEquals => return "<<<="
    ExprType.RotrEquals => return ">>>="
    ExprType.AddTruncEquals => return "!+="
    ExprType.SubTruncEquals => return "!-="
    ExprType.MulTruncEquals => return "!*="
    ExprType.Dot => return "."
    ExprType.Dotdotdot => return "..."
    ExprType.Tuple => return "tuple"
    ExprType.List => return "list"
    ExprType.As => return "as"
    ExprType.In => return "in"
    ExprType.Const => return "const"
    ExprType.Null => return "null"
    ExprType.Notnull => return "notnull"
    ExprType.Funcaddr => return "funcaddr"
    ExprType.Arrayof => return "arrayof"
    ExprType.Typeof => return "typeof"
    ExprType.Unsigned => return "unsigned"
    ExprType.Signed => return "signed"
    ExprType.Widthof => return "widthof"
    ExprType.Isnull => return "isnull"
    ExprType.UintType => return "uinttype"
    ExprType.IntType => return "inttype"
    ExprType.FloatType => return "floattype"
    ExprType.StringType => return "stringtype"
    ExprType.BoolType => return "booltype"
    ExprType.NoneType => return "nonetype"
    ExprType.Typeindex => return "typeindex"
    ExprType.Namedparam => return "namedparam"
    default => panic "Unexpected expression type ", type
  }
}

// Return the expression type given its sym.
func getExprTypeFromSym(sym: Sym) -> ExprType {
  // TODO: pre-build this symbols for improved speed.
  switch sym {
    Sym.new("+") => return ExprType.Add
    Sym.new("-") => return ExprType.Sub
    Sym.new("*") => return ExprType.Mul
    Sym.new("/") => return ExprType.Div
    Sym.new("%") => return ExprType.Mod
    Sym.new("&&") => return ExprType.And
    Sym.new("||") => return ExprType.Or
    Sym.new("^^") => return ExprType.Xor
    Sym.new("&") => return ExprType.Bitand
    Sym.new("|") => return ExprType.Bitor
    Sym.new("^") => return ExprType.Bitxor
    Sym.new("**") => return ExprType.Exp
    Sym.new("<<") => return ExprType.Shl
    Sym.new(">>") => return ExprType.Shr
    Sym.new("<<<") => return ExprType.Rotl
    Sym.new(">>>") => return ExprType.Rotr
    Sym.new("!+") => return ExprType.AddTrunc
    Sym.new("!-") => return ExprType.SubTrunc
    Sym.new("!*") => return ExprType.MulTrunc
    Sym.new("~") => return ExprType.Bitnot
    Sym.new("<") => return ExprType.Lt
    Sym.new("<=") => return ExprType.Le
    Sym.new(">") => return ExprType.Gt
    Sym.new(">=") => return ExprType.Ge
    Sym.new("==") => return ExprType.Equal
    Sym.new("!=") => return ExprType.Notequal
    Sym.new("-") => return ExprType.Negate
    Sym.new("!-") => return ExprType.NegateTrunc
    Sym.new("!") => return ExprType.Not
    Sym.new("<>") => return ExprType.Cast
    Sym.new("!<>") => return ExprType.CastTrunc
    Sym.new("?:") => return ExprType.Select
    Sym.new("()") => return ExprType.Call
    Sym.new("[]") => return ExprType.Index
    Sym.new("[:]") => return ExprType.Slice
    Sym.new("secret") => return ExprType.Secret
    Sym.new("reveal") => return ExprType.Reveal
    Sym.new("=") => return ExprType.Equals
    Sym.new("+=") => return ExprType.AddEquals
    Sym.new("-=") => return ExprType.SubEquals
    Sym.new("*=") => return ExprType.MulEquals
    Sym.new("/=") => return ExprType.DivEquals
    Sym.new("%=") => return ExprType.ModEquals
    Sym.new("&&=") => return ExprType.AndEquals
    Sym.new("||=") => return ExprType.OrEquals
    Sym.new("^^=") => return ExprType.XorEquals
    Sym.new("&=") => return ExprType.BitandEquals
    Sym.new("|=") => return ExprType.BitorEquals
    Sym.new("^=") => return ExprType.BitxorEquals
    Sym.new("**=") => return ExprType.ExpEquals
    Sym.new("<<=") => return ExprType.ShlEquals
    Sym.new(">>=") => return ExprType.ShrEquals
    Sym.new("<<<=") => return ExprType.RotlEquals
    Sym.new(">>>=") => return ExprType.RotrEquals
    Sym.new("!+=") => return ExprType.AddTruncEquals
    Sym.new("!-=") => return ExprType.SubTruncEquals
    Sym.new("!*=") => return ExprType.MulTruncEquals
    Sym.new(".") => return ExprType.Dot
    Sym.new("...") => return ExprType.Dotdotdot
    Sym.new("tuple") => return ExprType.Tuple
    Sym.new("list") => return ExprType.List
    Sym.new("as") => return ExprType.As
    Sym.new("in") => return ExprType.In
    Sym.new("const") => return ExprType.Const
    Sym.new("null") => return ExprType.Null
    Sym.new("notnull") => return ExprType.Notnull
    Sym.new("funcaddr") => return ExprType.Funcaddr
    Sym.new("arrayof") => return ExprType.Arrayof
    Sym.new("typeof") => return ExprType.Typeof
    Sym.new("unsigned") => return ExprType.Unsigned
    Sym.new("signed") => return ExprType.Signed
    Sym.new("widthof") => return ExprType.Widthof
    Sym.new("isnull") => return ExprType.Isnull
    Sym.new("uinttype") => return ExprType.UintType
    Sym.new("inttype") => return ExprType.IntType
    Sym.new("floattype") => return ExprType.FloatType
    Sym.new("stringtype") => return ExprType.StringType
    Sym.new("booltype") => return ExprType.BoolType
    Sym.new("nonetype") => return ExprType.NoneType
    Sym.new("typeindex") => return ExprType.Typeindex
    Sym.new("namedparam") => return ExprType.Namedparam
  }
}

// The expression class represents all expression trees in Rune.
class Expr(self, type: ExprType, location: Location) {
  self.type = type
  self.location = location
  self.isType = false
  self.isConst = false
  self.autocast = false  // Set on integer constants without a type suffix.
  self.width = 0u32
  // TODO: add datatype when ported to Rune.
  // self.datatype = null(Datatype)
  self.val = null(Value(0u32))
  self.bindingInstance = false
  self.typedValue = null(types.Type)

  func newConstant(value: Value, location: Location) -> Expr {
    expr = Expr(ExprType.Constant, location)
    expr.val = value
    return expr
  }

  func newBinary(type: ExprType, left: Expr, right: Expr, location: Location) -> Expr {
    expr = Expr(type, location)
    expr.appendChildExpr(left)
    expr.appendChildExpr(right)
    return expr
  }

  func newUnary(type: ExprType, child: Expr, location: Location) -> Expr {
    expr = Expr(type, location)
    expr.appendChildExpr(child)
    return expr
  }

  func newIdent(sym: Sym, location: Location) -> Expr {
    expr = Expr(ExprType.Ident, location)
    expr.val = Value(sym)
    return expr
  }

  func newTuple(children, location) -> Expr {
    expr = Expr(ExprType.Tuple, location)
    for child in children {
      expr.appendChildExpr(child)
    }
    return expr
  }

  func newArray(children, location) -> Expr {
    expr = Expr(ExprType.Array, location)
    for child in children {
      expr.appendChildExpr(child)
    }
    return expr
  }

  // Return the precedence of the expression.
  func getPrecedence(self) -> u32 {
    return getPrecedence(self.type)
  }

  // Return the name of this expression's type.
  func typeName(self) {
    return getExprTypeName(self.type)
  }

  // Dump an expression list, separated by commas.
  func dumpList(self, var text: string) {
    firstTime = true
    for child in self.childExprs() {
      if !firstTime {
        text += ", "
      }
      firstTime = false
      child.dumpToString(text)
    }
  }

  // Write out a call expression.
  func dumpCall(self, var text: string) {
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!
    left.dumpToString(text)
    text += "("
    if !isnull(right) {
      right.dumpToString(text)
    }
    text += ")"
  }

  // Write out an index expression.
  func dumpIndex(self, var text: string) {
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!
    left.dumpToString(text)
    text += "["
    if !isnull(right) {
      right.dumpToString(text)
    }
    text += "]"
  }

  // Write out a slice expression.
  func dumpSlice(self, var text: string) {
    left = self.firstChildExpr!
    lower = left.nextExprChildExpr!
    upper = lower.nextExprChildExpr!
    left.dumpToString(text)
    text += "["
    lower.dumpToString(text)
    text += ":"
    upper.dumpToString(text)
    text += "]"
  }

  // Write out a cast expression.
  func dumpCast(self, var text: string, parentPrecedence: u32, truncate: bool) {
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!
    precedence = self.getPrecedence()
    if precedence <= parentPrecedence {
      text += "("
    }
    if truncate {
      text += "!"
    }
    text += "<"
    left.dumpToString(text)
    text += ">"
    right.dumpToString(text)
    if precedence <= parentPrecedence {
      text += ")"
    }
  }

  // Write out a select expression.
  func dumpSelect(self, var text: string, parentPrecedence: u32) {
    s = self.firstChildExpr!
    a = s.nextExprChildExpr!
    b = a.nextExprChildExpr!
    precedence = self.getPrecedence()
    if precedence <= parentPrecedence {
      text += "("
    }
    s.dumpToString(text)
    text += " ? "
    a.dumpToString(text)
    text += " : "
    b.dumpToString(text)
    if precedence <= parentPrecedence {
      text += ")"
    }
  }

  // Write out a binary expression.
  func dumpBinary(self, var text: string, opType: string, parentPrecedence: u32) {
    parent = self.parentExpr
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!
    precedence = self.getPrecedence()
    needParens = precedence <= parentPrecedence && precedence < getPrecedence(ExprType.Dot)
    if needParens {
      text += "("
    }
    left.dumpToString(text)
    if precedence < getPrecedence(ExprType.Dot) {
      text += " " + opType + " "
    } else {
      text += opType
    }
    right.dumpToString(text)
    if needParens {
      text += ")"
    }
  }

  // Write out a prefix expression.
  func dumpPrefix(self, var text: string, opType: string, parentPrecedence: u32) {
    left = self.firstChildExpr!
    precedence = self.getPrecedence()
    if precedence <= parentPrecedence {
      text += "("
    }
    text += opType
    left.dumpToString(text)
    if precedence <= parentPrecedence {
      text += ")"
    }
  }

  // Dump a builtin function such as typeof(a).
  func dumpBuiltin(self, var text: string, name: string) {
    left = self.firstChildExpr!
    text += name + "("
    left.dumpToString(text)
    text += ")"
  }

  // Write out the array expression.
  func dumpArray(self, var text: string) {
    text += "["
    firstTime = true
    for child in self.childExprs() {
      if !firstTime {
        text += ", "
      }
      firstTime = false
      child.dumpToString(text)
    }
    text += "]"
  }

  // Write out the tuple expression.
  func dumpTuple(self, var text: string) {
    text += "("
    firstTime = true
    for child in self.childExprs() {
      if !firstTime {
        text += ", "
      }
      firstTime = false
      child.dumpToString(text)
    }
    text += ")"
  }

  // Write out the assignment expression.
  func dumpAssignment(self, var text) {
    target = self.firstChildExpr!
    value = target.nextExprChildExpr!
    constraint = value.nextExprChildExpr
    target.dumpToString(text)
    if !isnull(constraint) {
      text.concat(": ")
      constraint.dumpToString(text)
    }
    text.append(' ')
    text += getExprTypeName(self.type)
    text.append(' ')
    value.dumpToString(text)
  }

  // Write out the expression in a reasonably readable format to the end of |string|.
  func dumpToString(self, var text: string) {
    parent = self.parentExpr
    parentPrecedence = 0u32
    if !isnull(parent) {
      parentPrecedence = parent.getPrecedence()
    }
    switch self.type {
      ExprType.Constant => text += self.val.toString()
      ExprType.Ident => text += self.val.symVal.name
      ExprType.Array => self.dumpArray(text)
      ExprType.Tuple => self.dumpTuple(text)
      ExprType.RandUint => text += "rand%u" % self.width
      ExprType.Modint => self.dumpBinary(text, "mod", parentPrecedence)
      ExprType.Add => self.dumpBinary(text, "+", parentPrecedence)
      ExprType.Sub => self.dumpBinary(text, "-", parentPrecedence)
      ExprType.Mul => self.dumpBinary(text, "*", parentPrecedence)
      ExprType.Div => self.dumpBinary(text, "/", parentPrecedence)
      ExprType.Mod => self.dumpBinary(text, "%", parentPrecedence)
      ExprType.And => self.dumpBinary(text, "&&", parentPrecedence)
      ExprType.Or => self.dumpBinary(text, "||", parentPrecedence)
      ExprType.Xor => self.dumpBinary(text, "^^", parentPrecedence)
      ExprType.Bitand => self.dumpBinary(text, "&", parentPrecedence)
      ExprType.Bitor => self.dumpBinary(text, "|", parentPrecedence)
      ExprType.Bitxor => self.dumpBinary(text, "^", parentPrecedence)
      ExprType.Exp => self.dumpBinary(text, "**", parentPrecedence)
      ExprType.Shl => self.dumpBinary(text, "<<", parentPrecedence)
      ExprType.Shr => self.dumpBinary(text, ">>", parentPrecedence)
      ExprType.Rotl => self.dumpBinary(text, "<<<", parentPrecedence)
      ExprType.Rotr => self.dumpBinary(text, ">>>", parentPrecedence)
      ExprType.AddTrunc => self.dumpBinary(text, "!+", parentPrecedence)
      ExprType.SubTrunc => self.dumpBinary(text, "!-", parentPrecedence)
      ExprType.MulTrunc => self.dumpBinary(text, "!*", parentPrecedence)
      ExprType.Lt => self.dumpBinary(text, "<", parentPrecedence)
      ExprType.Le => self.dumpBinary(text, "<=", parentPrecedence)
      ExprType.Gt => self.dumpBinary(text, ">", parentPrecedence)
      ExprType.Ge => self.dumpBinary(text, ">=", parentPrecedence)
      ExprType.Equal => self.dumpBinary(text, "==", parentPrecedence)
      ExprType.Notequal => self.dumpBinary(text, "!=", parentPrecedence)
      ExprType.Negate => self.dumpPrefix(text, "-", parentPrecedence)
      ExprType.NegateTrunc => self.dumpPrefix(text, "!-", parentPrecedence)
      ExprType.Not => self.dumpPrefix(text, "!", parentPrecedence)
      ExprType.Bitnot => self.dumpPrefix(text, "~", parentPrecedence)
      ExprType.Cast => self.dumpCast(text, parentPrecedence, false)
      ExprType.CastTrunc => self.dumpCast(text, parentPrecedence, true)
      ExprType.Select => self.dumpSelect(text, parentPrecedence)
      ExprType.Call => self.dumpCall(text)
      ExprType.Funcaddr => self.dumpPrefix(text, "&", parentPrecedence)
      ExprType.Arrayof => self.dumpBuiltin(text, "arrayof")
      ExprType.Typeof => self.dumpBuiltin(text, "typeof")
      ExprType.Unsigned => self.dumpBuiltin(text, "unsigned")
      ExprType.Signed => self.dumpBuiltin(text, "signed")
      ExprType.Widthof => self.dumpBuiltin(text, "widthof")
      ExprType.Isnull => self.dumpBuiltin(text, "isnull")
      ExprType.Null => self.dumpBuiltin(text, "null")
      ExprType.Notnull => {
        self.firstChildExpr.dumpToString(text)
        text.append('!')
      }
      ExprType.Index, ExprType.Typeindex => self.dumpIndex(text)
      ExprType.Slice => self.dumpSlice(text)
      ExprType.Secret => {
        text += "secret("
        self.firstChildExpr.dumpToString(text)
        text += ")"
      }
      ExprType.Reveal => {
        text += "reveal("
        self.firstChildExpr.dumpToString(text)
        text += ")"
      }
      ExprType.Const => self.dumpPrefix(text, "const ", parentPrecedence)
      ExprType.Equals, ExprType.AddEquals, ExprType.SubEquals, ExprType.MulEquals,
          ExprType.DivEquals, ExprType.ModEquals, ExprType.AndEquals, ExprType.OrEquals,
          ExprType.XorEquals, ExprType.ExpEquals, ExprType.ShlEquals, ExprType.ShrEquals,
          ExprType.RotlEquals, ExprType.RotrEquals, ExprType.AddTruncEquals,
          ExprType.SubTruncEquals, ExprType.MulTruncEquals, ExprType.BitandEquals,
          ExprType.BitorEquals, ExprType.BitxorEquals => self.dumpAssignment(text)
      ExprType.As => self.dumpBinary(text, "as", parentPrecedence)
      ExprType.In => self.dumpBinary(text, "in", parentPrecedence)
      ExprType.Dot => self.dumpBinary(text, ".", parentPrecedence)
      ExprType.Dotdotdot => self.dumpBinary(text, "...", parentPrecedence)
      ExprType.List => self.dumpList(text)
      ExprType.UintType => text += "u%u" % self.width
      ExprType.IntType => text += "i%u" % self.width
      ExprType.FloatType => text += "f%u" % self.width
      ExprType.StringType => text += "string"
      ExprType.BoolType => text += "bool"
      ExprType.NoneType => text += "none"
      ExprType.Namedparam => {
        text += self.firstChildExpr.val.symVal.name + " = "
        self.lastChildExpr.dumpToString(text)
      }
    }
  }

  // Convert the expression to a string in a reasonably readable format.
  func toString(self) -> string {
    text = ""
    self.dumpToString(text)
    return text
  }

  // Write out the expression in a reasonably readable format.
  func dump(self: Expr) {
    text = ""
    self.dumpToString(text)
    println text
  }

  // Make a deep copy of the expression.
  func copy(self: Expr) -> Expr {
    newExpr = Expr(self.type, self.location)
    // TODO: Comment in when we port datatype to Rune.
    // newExpr.datatype = expr.datatype
    newExpr.isType = self.isType
    self.isConst = self.isConst
    newExpr.width = self.width
    newExpr.autocast = self.autocast
    newExpr.val = self.val
    for child in self.childExprs() {
      newChild = child.copy()
      newExpr.appendChildExpr(newChild)
    }
    return newExpr
  }

  // C Generator ------------------------------------------------------------------

  func genC(self, builder: c.CBuilder) -> c.CExpr {
    switch self.type {
      // First, the operators that map directly to C binary operators
      ExprType.AddTrunc => return self.genCBinaryOp(builder)
      ExprType.Constant => return self.val.genC(builder, false)
      ExprType.Ident => return self.val.genC(builder, self.bindingInstance)
      ExprType.List => return self.genCList(builder)
      ExprType.Mod => return self.genCBinaryOp(builder)
      ExprType.MulTrunc => return self.genCBinaryOp(builder)
      ExprType.Negate => return self.genCPrefixOp(builder)
      ExprType.And => return self.genCBinaryOp(builder)
      ExprType.Or => return self.genCBinaryOp(builder)
      ExprType.Bitand => return self.genCBinaryOp(builder)
      ExprType.Bitor => return self.genCBinaryOp(builder)
      ExprType.Bitxor => return self.genCBinaryOp(builder)
      ExprType.Bitnot => return self.genCPrefixOp(builder)
      ExprType.Shl => return self.genCBinaryOp(builder)
      ExprType.Shr => return self.genCBinaryOp(builder)
      ExprType.SubTrunc => return self.genCBinaryOp(builder)
      ExprType.Lt => return self.genCBinaryOp(builder)
      ExprType.Le => return self.genCBinaryOp(builder)
      ExprType.Gt => return self.genCBinaryOp(builder)
      ExprType.Ge => return self.genCBinaryOp(builder)
      ExprType.Equal => return self.genCBinaryOp(builder)
      ExprType.Notequal => return self.genCBinaryOp(builder)

      // Now, the operators that map to runtime functions
      ExprType.Add => return self.genCBinaryOp(builder)
      ExprType.Div => return self.genCBinaryOp(builder)
      ExprType.Exp => return self.genCBinaryOp(builder)
      ExprType.Mul => return self.genCBinaryOp(builder)
      ExprType.Rotl => return self.genCBinaryOp(builder)
      ExprType.Rotr => return self.genCBinaryOp(builder)
      ExprType.Sub => return self.genCBinaryOp(builder)

      ExprType.Call => return self.genCCall(builder)

      // Assignment
      ExprType.Equals => return self.genCBinaryOp(builder)

      // Types
      ExprType.UintType => return c.CExpr(self.genCType(builder))
      ExprType.IntType => return c.CExpr(self.genCType(builder))
      ExprType.FloatType => return c.CExpr(self.genCType(builder))
      ExprType.StringType => return c.CExpr(self.genCType(builder))
      ExprType.BoolType => return c.CExpr(self.genCType(builder))
      ExprType.NoneType => return c.CExpr(self.genCType(builder))
      ExprType.Typeindex => return c.CExpr(self.genCType(builder))
      ExprType.Namedparam => return c.CExpr(self.genCType(builder))

      // Arrays
      ExprType.Arrayof => return self.genCArrayOf(builder)
      ExprType.Array => return self.genCArray(builder)

      // Tuples
      ExprType.Tuple => return self.genCTuple(builder)
      ExprType.Index => return self.genCIndex(builder)

      // Structs
      ExprType.Dot => return self.genCFieldSel(builder)

      default => raise Status.Unimplemented, "Expression type not yet supported by C backend: ", getExprTypeName(self.type)
    }
  }

  func genCList(self, builder: c.CBuilder) -> c.CExpr {
    // The Hello World test requires a single-valued list of expressions to be
    // passed as arguments to a procedure call.
    elements = c.CExprList()
    for child in self.childExprs() {
      elements.appendCExpr(child.genC(builder))
    }
    return c.CExpr(elements)
  }

  func genCPrefixOp(self, builder: c.CBuilder) -> c.CExpr {
    parent = self.parentExpr
    left = self.firstChildExpr!

    switch self.type {
      ExprType.Negate => {
        return builder.cUnaryMinus(self.location, left.genC(builder))
      }
      ExprType.Bitnot => {
        return builder.cUnaryBitnot(self.location, left.genC(builder))
      }

      default => raise Status.Unimplemented, "Unary expression operator not yet supported by C backend: ", getExprTypeName(self.type)
    }
  }

  func genCBinaryOp(self, builder: c.CBuilder) -> c.CExpr {
    parent = self.parentExpr
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!

    if self.type == ExprType.Equals {
      self.bindingInstance = true
    }
    l = left.genC(builder)
    self.bindingInstance = false
    r = right.genC(builder)

    // First, generate C Binary Operators for those operators that map
    // directly to C operators.
    switch self.type {
      ExprType.AddTrunc => op = c.CBinaryOperator.Type.Plus
      ExprType.SubTrunc => op = c.CBinaryOperator.Type.Minus
      ExprType.MulTrunc => op = c.CBinaryOperator.Type.Times
      ExprType.Mod => op = c.CBinaryOperator.Type.Modulus
      ExprType.And => op = c.CBinaryOperator.Type.LogAnd
      ExprType.Or =>  op = c.CBinaryOperator.Type.LogOr
      ExprType.Bitand => op = c.CBinaryOperator.Type.BitAnd
      ExprType.Bitor => op = c.CBinaryOperator.Type.BitOr
      ExprType.Bitxor => op = c.CBinaryOperator.Type.BitXor
      ExprType.Shl => op = c.CBinaryOperator.Type.ShiftLeft
      ExprType.Shr => op = c.CBinaryOperator.Type.ShiftRight
      ExprType.Lt => op = c.CBinaryOperator.Type.LessThan
      ExprType.Le => op = c.CBinaryOperator.Type.LessThanEqual
      ExprType.Gt => op = c.CBinaryOperator.Type.GreaterThan
      ExprType.Ge => op = c.CBinaryOperator.Type.GreaterThanEqual
      ExprType.Equal => op = c.CBinaryOperator.Type.Equals
      ExprType.Notequal => op = c.CBinaryOperator.Type.NotEquals
      ExprType.Equals => op = c.CBinaryOperator.Type.Assign

      default => {
        switch self.type {
          ExprType.Add => {
            if left.typedValue == types.STRING() {
              raise Status.Unimplemented, "String addition not yet supported by C backend"
            } else if left.typedValue.type == types.Type.TypeClass.Array {
              fn = c.CRuntimeFunction.ArrayConcat
            } else {
              fn = c.CRuntimeFunction.AddWithOverflowDetect
            }
          }
          ExprType.Mul => fn = c.CRuntimeFunction.MulWithOverflowDetect
          ExprType.Sub => fn = c.CRuntimeFunction.SubWithOverflowDetect
          ExprType.Div => fn = c.CRuntimeFunction.DivWithOverflowDetect
          ExprType.Exp => fn = c.CRuntimeFunction.Exponentiate
          ExprType.Rotl => fn = c.CRuntimeFunction.RotateLeft
          ExprType.Rotr => fn = c.CRuntimeFunction.RotateRight
          default => raise Status.Unimplemented, "Binary expression operator not yet supported by C backend: ", getExprTypeName(self.type)
        }
        // Can Rune do arbitrary length calls?
        list = c.CExprList()
        list.appendCExpr(l)
        list.appendCExpr(r)
        return builder.cCall(self.location, fn, c.CExpr(list))
      }
    }
    return builder.cBinaryOperator(self.location, op, left.typedValue, l, r)
  }

  func genCArrayOf(self, builder: c.CBuilder) -> c.CExpr {
    left = self.firstChildExpr!
    elements = arrayof(c.CExpr)
    return builder.cArray(self.location, left.typedValue!, elements)
  }

  func genCArray(self, builder: c.CBuilder) -> c.CExpr {
    left = self.firstChildExpr!
    elements = arrayof(c.CExpr)
    for child in self.childExprs() {
      elements.append(child.genC(builder))
    }
    return builder.cArray(self.location, left.typedValue!, elements)
  }

  func genCTuple(self, builder: c.CBuilder) -> c.CExpr {
    elements = c.CExprList()
    for child in self.childExprs() {
      cexpr = child.genC(builder)
      elements.appendCExpr(child.genC(builder))
    }
    // Tuple types should not be null (if they are, they contain an expression not yet
    // supported by the typechecker, and therefore not the c backend either).
    // self.typedValue should have been set by the typechecker before C generation
    // begins.
    return builder.cTuple(self.location, self.typedValue, elements)
  }

  func genCIndex(self, builder: c.CBuilder) -> c.CExpr {
    indexee = self.firstChildExpr!
    index = indexee.nextExprChildExpr!
    // We know from typechecking that index is a u64.
    left = indexee.genC(builder)
    if indexee.typedValue.type == types.Type.TypeClass.Array {
      right = index.genC(builder)
      return builder.cIndex(self.location, indexee.typedValue, left, right)
    }
    assert index.type == ExprType.Constant && index.val.type == DatatypeType.Uint
    i = index.val.intVal.uint64()
    return builder.cIndex(self.location, indexee.typedValue, left, i)
  }

  func genCFieldSel(self, builder: c.CBuilder) -> c.CExpr {
    strct = self.firstChildExpr!
    field = strct.nextExprChildExpr!
    left = strct.genC(builder)
    return builder.cFieldSelect(self.location, left, field.val.symVal!)
  }

  func genCCall(self, builder: c.CBuilder) -> c.CExpr {
    left = self.firstChildExpr!
    right = left.nextExprChildExpr!
    fntype = left.typedValue
    assert !isnull(fntype)

    if left.type == ExprType.Dot {
      // Handle method calling for classes, etc.
      // Right now, we just handle the built-in methods on arrays.
      array = left.firstChildExpr!
      if array.typedValue.type == types.Type.TypeClass.Array {
        field = array.nextExprChildExpr!
        switch field.toString() {
          "append" => fn = c.CRuntimeFunction.ArrayAppend
          "concat" => fn = c.CRuntimeFunction.ArrayConcat
          "items" => fn = c.CRuntimeFunction.ArrayItems
          "length" => fn = c.CRuntimeFunction.ArrayLength
          "reverse" => fn = c.CRuntimeFunction.ArrayReverse
          "values" => fn = c.CRuntimeFunction.ArrayValues
          default => raise Status.Unimplemented, "Unknown array builtin operator: \"", field, "\""
        }
        args = c.CExprList()
        args.append(array.genC(builder))
        args.append(right.genC(builder))
        return builder.cCall(self.location, fn, c.CExpr(args), right.typedValue)
      }
    }

    if fntype.type == types.Type.TypeClass.Polymorphic {
      // A function expression need not be a simple identifier; it may be the
      // result of an expression, for example, a higher-order function that
      // returns a function. Moreover, that function may be polymorphic, and
      // only specialize at this call point. We do not currently handle such a
      // case.
      // Right now, we only handle the case where the polymorphic function
      // expression is an identifier.
      if left.type != ExprType.Ident {
        raise Status.Unimplemented, "Can't generate code for polymorphic function expression ", left.toString()
      }
      // Append the instantiated types to the name (its specialization).
      specializedName = right.typedValue.genSpecializationName(left.val.symVal.name)
      specialization = Sym.new(specializedName)
      cfn = builder.cIdentifier(specialization, false)
    } else {
      cfn = left.genC(builder)
    }
    if right.typedValue.type == types.Type.TypeClass.Tuple {
      // Special case -- if right is a tuple, we need to encode cargs as a
      // CExprList of parameters, not as an actual tuple object. Otherwise,
      // instead of generating "f(a1, a2, ...)" we'll generate
      // "f(tupleX(a1, a2, ...))".
      parms = c.CExprList()
      for child in right.childExprs() {
        parms.appendCExpr(child.genC(builder))
      }
      cargs = c.CExpr(parms)
    } else {
      cargs = right.genC(builder)
    }
    return builder.cCall(self.location, cfn, cargs)
  }

  func genCType(self, builder: c.CBuilder) -> c.CTypeExpr {
    switch self.type {
      ExprType.UintType => return builder.cIntType(self.location, false, self.width)
      ExprType.IntType => return builder.cIntType(self.location, true, self.width)
      ExprType.FloatType => return builder.cFloatType(self.location, self.width)
      ExprType.StringType => return builder.cStringType(self.location)
      ExprType.BoolType => return builder.cBooleanType(self.location)
      ExprType.NoneType => return builder.cVoidType(self.location)
      ExprType.Ident => raise Status.Unimplemented, "named types not yet supported"
      default => raise Status.Unimplemented, "TypeExpression type not yet supported by C backend", self.type
      // TODO:
      //ExprType.Typeindex
      //ExprType.Namedparam
    }
  }
}

// Expressions form a tree, with each expression having a doubly-linked list of children.
relation DoublyLinked Expr:"Parent" Expr:"Child" cascade
relation DoublyLinked Ident Expr
relation OneToOne Statement Expr cascade
relation OneToOne Variable:"Initializer" Expr:"Initializer" cascade
relation OneToOne Variable:"Type" Expr:"Type" cascade
relation OneToOne Function:"Type" Expr:"Type" cascade

unittest {
  filepath = Filepath.new("test_filepath", null(Filepath), false)
  location = Location(filepath, 0u32, 0u32, 0u32)

  func createBinaryExpr() -> Expr {
    left = Expr.newConstant(Value("Hello"), location)
    assert left.getPrecedence() == getPrecedence(ExprType.Constant)
    right = Expr.newConstant(Value("World"), location)
    assert right.getPrecedence() == getPrecedence(ExprType.Constant)
    return Expr.newBinary(ExprType.Lt, left, right, location)
  }
}

unittest basicExprTest {
  ltExpr = createBinaryExpr()
  assert ltExpr.toString() == "\"Hello\" < \"World\""
}

unittest destroyTest {
  use block

  filepath = Filepath.new("test_filepath", null(Filepath), false)
  location = Location(filepath, 0u32, 0u32, 0u32)
  block = Block(location)
  statement =  Statement(block, StateType.Print, location)
  i = Bigint(0xdeadbeefu32, 256u32)
  expr = Expr.newConstant(Value(i), location)
  statement.insertExpr(expr)
  expr.destroy()
  assert isnull(statement.expr)
}

unittest copyTest {
  expr1 = createBinaryExpr()
  expr2 = expr1.copy()
  assert expr1 != expr2
  assert expr1.toString() == "\"Hello\" < \"World\""
  assert expr2.toString() == "\"Hello\" < \"World\""
}

unittest unaryTest {
  valueExpr = Expr.newConstant(Value(123u32), location)
  expr = Expr.newUnary(ExprType.Negate, valueExpr, location)
  expr.dump()
}

unittest newIdentTest {
  expr = Expr.newIdent(Sym.new("test"), location)
  expr.dump()
}

unittest getExprTypeNameTest {
  for i in range(<u32>ExprType.Add, <u32>ExprType.Namedparam) {
    type = <ExprType>i
    if type != ExprType.Negate && type != ExprType.NegateTrunc {
      assert type == getExprTypeFromSym(Sym.new(getExprTypeName(type)))
    }
  }
}

unittest {
  println "PASSED"
}
