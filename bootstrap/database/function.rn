//  Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use sym

use root
use location
use filepath
use value
use expr
use ident
use statement
use template
use block
use variable

import cbackend as c
import types

enum FuncType {
  Plain  // Includes methods.
  Operator  // Overloaded operator.
  Constructor
  Destructor
  Package  // Initializes all modules in the package.
  Module  // Initializes the module.
  Iterator
  Final
  Struct
  Enum
  Transformer
  Unittest
}

// Function linking type.
enum Linkage {
  Module  // Default, like Python, files in the same directory can access.
  Package  // Allow files in other directories to access.
  Libcall  // A library call API.  All params must have default values.
  Rpc  // An RPC API.  All params must have default values.
  Builtin  // Globally visible, never a lib call or RPC.
  ExternC  // An external C function.
  ExternRpc  // An external RPC function.
}

// Return a name for the function type.
func getFuncTypeName(type: FuncType) -> string {
  switch type {
    FuncType.Plain => return "func"  // Includes methods.
    FuncType.Unittest => return "unittest"  // Includes methods.
    FuncType.Constructor => return "class"
    FuncType.Destructor => return "destructor"
    FuncType.Package => return "package"  // Initializes all modules in the package.
    FuncType.Module => return "module"  // Initializes the module.
    FuncType.Iterator => return "iterator"
    FuncType.Operator => return "operator"
    FuncType.Final => return "final"
    FuncType.Struct => return "struct"
    FuncType.Enum => return "enum"
    FuncType.Transformer => return "transformer"
  }
}

// Create a new function.
class Function(self, parent: Function?, type: FuncType, sym: Sym,
    linkage: Linkage, location: Location) {
  self.type = type
  self.sym = sym
  self.linkage = linkage
  self.location = location
  self.isExtern = linkage == Linkage.ExternC || linkage == Linkage.ExternRpc
  self.opType = ExprType.Add  // Used for overloaded operators.
  if !isnull(parent) {
    parent.appendChildFunction(self)
    Ident(parent!, self, sym, location)
  }
  subBlock = Block(location)
  // Assume it can return until we learn otherwise.  This is only an issue when
  // evaluating recursive functions.
  subBlock.canReturn = true
  self.insertSubBlock(subBlock)

  // Return the name of the function.
  func name(self) -> string {
    return self.sym.name
  }

  func dumpParams(self, var text: string) {
    firstTime = true
    for variable in self.variables() {
      if !firstTime {
        text += ", "
      }
      firstTime = false
      if !variable.isParam {
        return
      }
      variable.dumpToString(text)
    }
  }

  // Dump the function to the end of |string| for debugging purposes.
  func dumpToString(self, var text: string) {
    if self.type == FuncType.Enum {
      self.dumpEnumToString(text)
      return
    }
    root.indent(text)
    dumpFuncHeader(self, text)
    self.dumpParams(text)
    text += ")"
    if !isnull(self.typeExpr) {
      text += " -> "
      self.typeExpr.dumpToString(text)
    }
    if self.linkage == Linkage.ExternC || self.linkage == Linkage.ExternRpc {
      text += "\n"
    } else {
      text += " {\n"
      getRoot().incrementIndent()
      self.subBlock.dumpToString(text)
      for function in self.childFunctions() {
        function.dumpToString(text)
      }
      getRoot().decrementIndent()
      getRoot().indent(text)
      text += "}\n"
    }

    func dumpFuncHeader(self: Function, var text: string) {
      if self.linkage == Linkage.ExternC {
        text.concat("extern \"C\" func %s" % self.name())
      } else if self.linkage == Linkage.ExternRpc {
        text.concat("rpc %s" % self.name())
      } else if self.type == FuncType.Final {
        text.concat("final")
      } else {
        text.concat("%s %s" % (getFuncTypeName(self.type), self.name()))
      }
      if self.type == FuncType.Constructor {
        template = self.template
        if template.refWidth != root.defaultRefWidth {
          text.concat(":u%u" % template.refWidth)
        }
      }
      text.append('(')
    }
  }

  // Dump an enumerated type to the string.
  func dumpEnumToString(self: Function, var text: string) {
    root.indent(text)
    text.concat("enum %s {\n" % self.name())
    getRoot().incrementIndent()
    for variable in self.variables() {
      root.indent(text)
      variable.dumpToString(text)
      text.append('\n')
    }
    getRoot().decrementIndent()
    root.indent(text)
    text.concat("}\n")
  }

  func genC(self: Function, builder: c.CBuilder) {
    switch self.type {
      FuncType.Module => self.genModule(builder)
      FuncType.Plain => self.genCPlainFunc(builder)
      FuncType.Struct => self.genCStruct(builder)
      default => raise Status.Unimplemented, "Function type not yet supported by C backend ", self.type
    }
  }

  func genModule(self: Function, builder: c.CBuilder) {
    for childfunc in self.childFunctions() {
       childfunc.genC(builder)
    }
    for statement in self.subBlock.statements() {
      // Note that a Rune statement may correspond to a C statement in main()
      // or a C top-level declaration.
      statement.genC(builder)
    }
  }


  func genCPlainFunc(self: Function, builder: c.CBuilder) {
    // TODO: figure out storage types.....

    // Is this a polymorphic type?  polymorphic type variables do not
    // correspond to anything in C (though we could try void*). Instead
    // we must iterate over all known instantiations -- this only works
    // because we are doing whole-program analysis before we generate
    // the C.  (i.e., it is not clear how this would work if we try to
    // compile different packages into separate C files).

    fntype = self.sym.typedValue
    assert !isnull(fntype)

    if fntype.type == types.Type.TypeClass.Polymorphic {
      /******** Polymorphic function: iterate over instantiations *********/
       pi = fntype.poly.instantiations
       if !isnull(pi) {
         for instantiation in pi {
           builder.resolveInstantiation(instantiation)
           builder.openScope()
           builder.openParamList()
           index = 0
           for variable in self.variables() {
             param = variable.genCParameter(builder, instantiation.varBindings[index])
             builder.addParam(param)
             index += 1
           }
           paramList = builder.closeParamList()
           builder.instantiate(fntype.poly!, instantiation)
           // The function block may generate dependencies, e.g., inner
           // functions or tuples or structs. Ensure that these are listed
           // as depedencies of this function.
           builder.openDependencyList();
           body = self.subBlock.genC(builder)
           builder.deInstantiate(fntype.poly!)
           builder.closeScope()
           newsym = builder.specialize(self.sym, instantiation)
           fundec = builder.cFunDef(self.location, newsym, paramList, body)
           fundec.addDependencies(builder.topDependencyList().names)
           builder.closeDependencyList()
           builder.addDeclaration(fundec)
         }
      }
    } else {
      /******************* Monomorphic function *************************/
      // open new scope - new parameter bindings are added to the scope
      // automatically
      builder.openScope()
      builder.openParamList()
      for variable in self.variables() {
        param = variable.genCParameter(builder)  // param is added to new scope
        builder.addParam(param)
      }
      paramList = builder.closeParamList()
      builder.openDependencyList();
      body = self.subBlock.genC(builder)
      builder.closeScope()
      fundec = builder.cFunDef(self.location, self.sym, paramList, body)
      fundec.addDependencies(builder.topDependencyList().names)
      builder.closeDependencyList()
      builder.addDeclaration(fundec)
    }
  }

  func genCStruct(self: Function, builder: c.CBuilder) {
    fntype = self.sym.typedValue
    assert !isnull(fntype)

    if fntype.type == types.Type.TypeClass.Polymorphic {
      /******** Polymorphic function: iterate over instantiations *********/
       pi = fntype.poly.instantiations
       if !isnull(pi) {
         for instantiation in pi {
           builder.resolveInstantiation(instantiation)
           builder.openScope()
           builder.openParamList()
           index = 0
           for variable in self.variables() {
             param = variable.genCParameter(builder, instantiation.varBindings[index])
             builder.addParam(param)
             index += 1
           }
           paramList = builder.closeParamList()
           builder.instantiate(fntype.poly!, instantiation)
           // The function block may generate dependencies, e.g., inner
           // functions or tuples or structs. Ensure that these are listed
           // as depedencies of this function.
           builder.openDependencyList();
           body = self.subBlock.genC(builder)
           builder.deInstantiate(fntype.poly!)
           builder.closeScope()
           newsym = builder.specialize(self.sym, instantiation)
           fundec = builder.cStruct(self.location, newsym, paramList, body)
           fundec.addDependencies(builder.topDependencyList().names)
           builder.closeDependencyList()
           builder.addDeclaration(fundec)
         }
      }
    } else {
      /******************* Monomorphic function *************************/
      // open new scope - new parameter bindings are added to the scope
      // automatically
      builder.openScope()
      builder.openParamList()
      for variable in self.variables() {
        param = variable.genCParameter(builder)  // param is added to new scope
        builder.addParam(param)
      }
      paramList = builder.closeParamList()
      builder.openDependencyList();
      body = self.subBlock.genC(builder)
      builder.closeScope()
      fundec = builder.cStruct(self.location, self.sym, paramList, body)
      fundec.addDependencies(builder.topDependencyList().names)
      builder.closeDependencyList()
      builder.addDeclaration(fundec)
    }
  }

  // Dump the function to stdout for debugging purposes.
  func dump(self) {
    text = ""
    self.dumpToString(text)
    print text
  }

  // Make a copy of the function in |destBlock|.
  func copy(self, destFunc: Function) -> Function {
    newFunction = Function(destFunc, self.type, self.sym, self.linkage, self.location)
    for variable in self.variables() {
      variable.copy(newFunction)
    }
    newBlock = self.subBlock.copy()
    newFunction.insertSubBlock(newBlock)
    if !isnull(self.typeExpr) {
      newFunction.typeExpr = self.typeExpr.copy()
    }
    // TODO: Comment this back in when we port templates.
    // if self.type == FuncType.Constructor {
      // self.templ.copy(newFunction)
    // }
    return newFunction
  }

  // Prepend a call statement to |childFunction| at the end of |function|.
  // |childFunction| will be called with no parameters.
  func prependFunctionCall(self, childFunction: Function) -> Statement {
    statement = self.appendFunctionCall(childFunction)
    // Move the statement to the start of the block.
    block = self.subBlock!
    block.removeStatement(statement)
    block.insertStatement(statement)
    return statement
  }

  // Append a call statement to |childFunction| at the end of |function|.
  // |childFunction| will be called with no parameters.
  func appendFunctionCall(self, childFunction: Function) -> Statement {
    ident = childFunction.firstNameIdent
    pathExpr = ident.createPathExpr()
    block = self.subBlock!
    location = Location(block.location.filepath!, 0u32, 0u32, 0u32)
    emptyParamsExpr = Expr(ExprType.List, location)
    callExpr = Expr.newBinary(ExprType.Call, pathExpr, emptyParamsExpr, location)
    statement = Statement(block, StateType.Call, location)
    statement.insertExpr(callExpr)
    return statement
  }

  // Generate a unique name for an identifier in the function, based on |name|.
  // Just use |name| if there is no conflict, otherwise, add _n, where n is an
  // integer to make the name unique in the function.
  func createUniqueSym(self, sym: Sym) -> Sym {
    if isnull(self.findIdent(sym)) {
      return sym
    }
    counter = 1u32
    do {
      newSym = Sym.new("%s_%u" % (sym.name, counter))
      counter += 1
    } while !isnull(self.findIdent(newSym))
    return newSym
  }

  // Create a path expression to this function.
  func createPathExpr(self) -> Expr {
    identExpr = Expr.newIdent(self.sym, self.location)
    parent = self.parentFunction
    if isnull(parent) {
      return identExpr
    }
    prefixExpr = parent.createPathExpr()
    return Expr.newBinary(ExprType.Dot, prefixExpr, identExpr, self.location)
  }
}

// Append a call statement to the module initialization function in the root function.
func insertModuleInitializationCall(moduleFunc: Function) {
  pathExpr = moduleFunc.createPathExpr()
  block = moduleFunc.subBlock!
  location = Location(block.location.filepath!, 0u32, 0u32, 0u32)
  emptyParamsExpr = Expr(ExprType.List, location)
  callExpression = Expr.newBinary(ExprType.Call, pathExpr, emptyParamsExpr, location)
  block = getMainFunc().subBlock!
  statement = Statement(block, StateType.Call, location)
  statement.insertExpr(callExpression)
  // Move the statement to after the last initialization call.
  lastInitializer = root.lastInitializerStatement
  block.removeStatement(statement)
  if !isnull(lastInitializer) {
    block.insertAfterStatement(lastInitializer, statement)
  } else {
    block.insertStatement(statement)
  }
  root.lastInitializerStatement = statement
}

// The root function of the function tree.
relation OneToOne Root:"Main" Function:"Main" cascade
relation DoublyLinked Function:"Parent" Function:"Child" cascade
relation OneToOne Filepath:"Module" Function:"Module"

// Create the main function.
func createMainFunc() {
  rootFilepath = Filepath("Root filepath", null(Filepath), true)
  rootLocation = Location(rootFilepath, 0u32, 0u32, 0u32)
  mainFunc = Function(null(Function), FuncType.Package,
        Sym.new("main"), Linkage.Package, rootLocation)
  typeExpr = Expr(ExprType.IntType, rootLocation)
  typeExpr.width = 32u32
  mainFunc.insertTypeExpr(typeExpr)
  getRoot().insertMainFunction(mainFunc)
  rootBlock = mainFunc.subBlock!
  rootFilepath.insertModuleFunction(mainFunc)
  nullExpr = null(Expr(ExprType.Add, rootLocation))
  u32TypeExpr = Expr(ExprType.UintType, rootLocation)
  stringTypeExpr = Expr(ExprType.StringType, rootLocation)
  u32TypeExpr.width = 32u32
  argcVar = Variable(mainFunc, true, true, Sym.new("argc"), nullExpr, u32TypeExpr, true, rootLocation)
  argvVar = Variable(mainFunc, true, true, Sym.new("argv"), nullExpr,
      stringTypeExpr, true, rootLocation)
  statement = Statement(mainFunc.subBlock!, StateType.Return, rootLocation)
  retVal = Expr.newConstant(Value(0i32), rootLocation)
  statement.insertExpr(retVal)
}

root = getRoot()
createMainFunc()

unittest {
  use statement

  mainFunc = getMainFunc()
  rootLocation = mainFunc.location
  rootFilepath = rootLocation.filepath
  argcVar = mainFunc.firstVariable!
  argvVar = argcVar.nextFunctionVariable!

  func createEmptyFunction(owningFunc: Function?, name: string) -> Function {
    return Function(owningFunc, FuncType.Plain, Sym.new(name), Linkage.Module, rootLocation)
  }

  func createPrintlnFunction(owningFunc: Function?, name: string, text: string) {
    function = createEmptyFunction(owningFunc, name);
    block = function.subBlock!
    Statement(block, StateType.Println, rootLocation)
    return function
  }
}

unittest dumpTest {
  mainFunc.dump()
}

unittest copyTest {
  destFunc = createEmptyFunction(null(Function), "destFunc")
  destFunc = mainFunc.copy(destFunc)
  destFunc.dump()
}

unittest prependAndAppendFunctionCallTest {
  destFunc = createEmptyFunction(null(Function), "destFunc")
  mainCopy = mainFunc.copy(destFunc)
  // Create an inner function.
  topFunc = createEmptyFunction(mainCopy, "topFunc")
  botFunc = createEmptyFunction(mainCopy, "botFunc")
  lastStatement = mainCopy.appendFunctionCall(botFunc)
  firstStatement = mainCopy.prependFunctionCall(topFunc)
  subBlock = mainCopy.subBlock!
  assert subBlock.firstStatement == firstStatement
  assert subBlock.lastStatement == lastStatement
  mainCopy.dump()
}

unittest insertModuleInitializationCallTest {
  // Create an inner function.
  function1 = createEmptyFunction(getRoot().mainFunction!, "module1")
  function2 = createEmptyFunction(getRoot().mainFunction!, "module2")
  insertModuleInitializationCall(function1)
  insertModuleInitializationCall(function2)
  getMainFunc().dump()
}

unittest createUniqueSymTest {
  baseSym = Sym.new("printTest")
  topFunc = createEmptyFunction(getMainFunc(), "topFunc")
  createPrintlnFunction(topFunc, baseSym.name, "func1")
  newSym = topFunc.createUniqueSym(baseSym)
  assert newSym.name == "printTest_1"
  createPrintlnFunction(topFunc, newSym.name, "func2")
  newSym = topFunc.createUniqueSym(baseSym)
  assert newSym.name == "printTest_2"
  createPrintlnFunction(topFunc, newSym.name, "func3")
  topFunc.dump()
}

unittest createConstructorTest {
  mainFunc = getMainFunc()
  rootLocation = mainFunc.location
  rootFilepath = rootLocation.filepath
  constructor = Function(mainFunc, FuncType.Constructor, Sym.new("Foo"),
      Linkage.Module, rootLocation)
  template = Template(constructor, 16u32, rootLocation)
}

unittest newIteratorAndOperatorTest {
  itr = Function(mainFunc, FuncType.Iterator, Sym.new("testItr"), Linkage.Module, rootLocation)
  op = Function(mainFunc, FuncType.Operator, Sym.new("*"), Linkage.Module, rootLocation)
  op.opType = ExprType.Mul
  itr.dump()
  op.dump()
  itr.destroy()
  op.destroy()
}
